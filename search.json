[{"path":"https://blue-matter.github.io/MARS/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://blue-matter.github.io/MARS/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://blue-matter.github.io/MARS/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://blue-matter.github.io/MARS/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://blue-matter.github.io/MARS/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://blue-matter.github.io/MARS/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://blue-matter.github.io/MARS/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://blue-matter.github.io/MARS/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://blue-matter.github.io/MARS/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://blue-matter.github.io/MARS/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://blue-matter.github.io/MARS/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://blue-matter.github.io/MARS/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://blue-matter.github.io/MARS/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://blue-matter.github.io/MARS/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://blue-matter.github.io/MARS/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://blue-matter.github.io/MARS/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://blue-matter.github.io/MARS/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://blue-matter.github.io/MARS/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://blue-matter.github.io/MARS/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://blue-matter.github.io/MARS/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://blue-matter.github.io/MARS/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"MARS (Multistock assessment with Regional Spatiotemporal dynamics) Copyright (C) 2023  Blue Matter Science  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. MARS  Copyright (C) 2023  Blue Matter Science This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":[]},{"path":"https://blue-matter.github.io/MARS/articles/equations.html","id":"equation-subscripts","dir":"Articles","previous_headings":"Variable definitions","what":"Equation subscripts","title":"Model equations","text":"following letters used subscripts identify dimension indexing model variables.","code":""},{"path":"https://blue-matter.github.io/MARS/articles/equations.html","id":"fixed-parameters","dir":"Articles","previous_headings":"Variable definitions","what":"Fixed parameters","title":"Model equations","text":"parameters set fixed inputs prior fitting model.","code":""},{"path":"https://blue-matter.github.io/MARS/articles/equations.html","id":"estimated-parameters","dir":"Articles","previous_headings":"Variable definitions","what":"Estimated parameters","title":"Model equations","text":"parameters set either estimated fixed model. parameters identified xx estimated real numbers transformed appropriate model parameter described . Unfished recruitment scaled additional user parameter rsr_s intended aid convergence. multi-stock models, rsr_s proportional expected stock size, .e., large values large stocks. Maturity natural mortality can either estimated defined user . Fishing mortality fixed zero corresponding catch less 10−810^{-8}.","code":""},{"path":"https://blue-matter.github.io/MARS/articles/equations.html","id":"derived-variables","dir":"Articles","previous_headings":"Variable definitions","what":"Derived variables","title":"Model equations","text":"section defines additional variables derived data estimated parameters described previous sections. Selectivity reported terms length. corresponding age-based selectivity stock obtained length--age probability key seasonally-varying based growth pattern. Movement parameterized three arrays several configurations possible. Stock-recruit functions use steepness parameterization, along unfished recruitment unfished spawning output per recruit (ϕ0\\phi_0). seasonal multi-region models, population dynamics model used numerically obtain ϕ0\\phi_0 setting Fy,m,f,r=0F_{y,m,f,r} = 0, recruitment 1, parameters constant seasonal values. ϕ0\\phi_0 equilibrium spawning output end numerical spool-.","code":""},{"path":"https://blue-matter.github.io/MARS/articles/equations.html","id":"population-dynamics","dir":"Articles","previous_headings":"","what":"Population dynamics","title":"Model equations","text":"following equations project population forward time. obtain initial abundance Ny=1,m=1,,r,sN_{y=1,m=1,,r,s} array seasonal multi-region models, numerical spool-performed seasonal fishing mortality equal Fm,f,reqF^{\\textrm{eq}}_{m,f,r}, recruitment 1, parameters set constant seasonal values first year model. initialization, equilibrium spawners per recruit ϕeq\\phi_{eq} final spawning output, seasonal numbers per recruit NPRm,,r,seq\\textrm{NPR}^{\\textrm{eq}}_{m,,r,s} obtained abundance array. initial abundance product equilibrium recruitment numbers per recruit. possible proportion mature population contribute annual spawning based natal spawning parameter specifying spatial spawning pattern. Thus, distinction potential spawners realized spawners. unfished replacement line stock-recruit relationship (Rs=1/ϕ0R_s = 1/\\phi_0) based realized spawning equilibrium.","code":""},{"path":"https://blue-matter.github.io/MARS/articles/equations.html","id":"report-variables","dir":"Articles","previous_headings":"","what":"Report variables","title":"Model equations","text":", calculate additional variables needed population dynamics model, interest fitting model reporting. multi-region /seasonal model, may want summary fishing mortality (per year) across regions fleets (Fy,,sF_{y,,s}) calculated Baranov equation natural mortality ,,sM_{y,,s}, total stock abundance beginning year Ny,,sN_{y,,s}, total catch Cy,,sNC^N_{y,,s}. summary total mortality (per year) Zy,,s=Fy,,s+,,sZ_{y,,s} = F_{y,,s} + M_{y,,s}. Vulnerable biomass availability stock individual fleets. fitting close-kin genetic data, can calculate probability parent-offspring pairs (POP) cohort year offspring yy, parental age capture ′', capture year parent tt. half-offspring pair probability calculated parental probability years ii jj, cohort year older younger sibling, respectively, parental survival year ii year jj. parental age observed, calculate probability across potential ages follow cohort ii jj.","code":""},{"path":"https://blue-matter.github.io/MARS/articles/equations.html","id":"objective-function","dir":"Articles","previous_headings":"","what":"Objective function","title":"Model equations","text":"objective function sum negative log-likelihoods, negative log-priors, penalty function.","code":""},{"path":"https://blue-matter.github.io/MARS/articles/equations.html","id":"likelihoods","dir":"Articles","previous_headings":"Objective function","what":"Likelihoods","title":"Model equations","text":"statistical distributions used likelihoods data described. dimensions data given well corresponding model variable predicted value, typically summed across stocks, (except stock composition). Composition data presented proportions pp separate table provides mean variance various likelihood options. close-kin likelihood uses ratio matches (either parent-offspring sibling matches) number pairwise comparisons (NN). Potential distributions likelihoods composition data, presented proportions, predicted mean variance. NN sample size composition vector θ\\theta tuning parameter Dirichlet-multinomial distribution, provided user inputs. NN unique vector observation, e.g., age composition season, fleet, region θ\\theta unique fleet survey.","code":""},{"path":"https://blue-matter.github.io/MARS/articles/equations.html","id":"priors","dir":"Articles","previous_headings":"Objective function","what":"Priors","title":"Model equations","text":"Prior distributions various parameters described .","code":""},{"path":"https://blue-matter.github.io/MARS/articles/equations.html","id":"penalty-function","dir":"Articles","previous_headings":"Objective function","what":"Penalty function","title":"Model equations","text":"quadratic penalty objective function Fy,m,f,rF_{y,m,f,r} exceeds specified maximum. Penalty=∑y∑m∑f∑r{0.1(Fmax−Fy,m,f,r)2Fy,m,f,r≥Fmax0otherwise \\textrm{Penalty} = \\sum_y\\sum_m\\sum_f\\sum_r \\begin{cases} 0.1 (F_{max} - F_{y,m,f,r})^2 & F_{y,m,f,r} \\ge F_{max}\\\\ 0 & \\textrm{otherwise} \\end{cases}","code":""},{"path":"https://blue-matter.github.io/MARS/articles/introduction.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"Introduction","text":"Traditional stock assessment fitted population models assumption fishery survey data represent dynamics single unit population (typically represented “stock”). mixed-stock fisheries display complex spatial, seasonal dynamics, assumptions may difficult meet order estimate biomass abundance individual stocks. example, composition fishery catches may naively split among constituent stocks, trends fishery catch per unit effort may assumed equally representative stocks. assumptions may produce defensible assessment. population mixing quite variable across seasons years, error data processing can propagate significant error estimation framework. MARS (Multi-stock Assessment Regional Spatiotemporal dynamics) age-structured model intended address situations explicit multi-stock, seasonal, spatial assessment model desirable. distinguishing features MARS include: Explicit modeling seasonal spatial dynamics, flexible parameterizations stock movement distribution Multi-stock modeling fishery catches identified stock species level. Instead, separate likelihood stock composition data facilitate data weighting profiling among data types Fitting close-kin genetic data estimate individual stock size, especially populations frequently well mixed fishery data “next-generation” stock assessment package, MARS relies state---art developments computational power, optimization software, along important lessons learned modeling mixed-stock marine fisheries, Atlantic bluefin tuna. MARS entirely written R uses automatic differentiation enabled RTMB model fitting.","code":""},{"path":[]},{"path":"https://blue-matter.github.io/MARS/articles/introduction.html","id":"model-fitting","dir":"Articles","previous_headings":"Package overview","what":"Model fitting","title":"Introduction","text":"Model fitting first starts S4 object class MARSdata, various slots specify model structure data. See help(\"MARSdata-class\"). check_data() scans object checks arrays correct dimension necessary ancillary information provided, e.g., sample sizes compositional data. data object set , can create parameter object RTMB make_parameters(). list starting values can provided override system defaults. function also calls make_map() create list specifies parameters fixed mirrored. list mapped parameters can provided override system defaults, additional arguments shortcut. parameter map set-finally checked check_parameters() reports structure model console including start values parameters estimated. objects can passed fit_MARS() creates fits model:","code":"MARSdata <- check_data(MARSdata) tmb_list <- make_parameters(MARSdata)  parameters <- check_parameters(tmb_list$p, tmb_list$map, MARSdata = MARSdata)  fit <- fit_MARS(MARSdata, parameters, map = tmb_list$map, random = tmb_list$random)"},{"path":"https://blue-matter.github.io/MARS/articles/introduction.html","id":"reporting","dir":"Articles","previous_headings":"Package overview","what":"Reporting","title":"Introduction","text":"Markdown reports generate figures tables model estimates, ascertain goodness fit, residuals, etc.  Example figure compares fit observed predicted index. reporting function uses variety plot_*() functions can accessed user. View options help(\"plot-MARS-data\") help(\"plot-MARS-state\").","code":"report(fit)"},{"path":"https://blue-matter.github.io/MARS/articles/introduction.html","id":"diagnostics","dir":"Articles","previous_headings":"Package overview","what":"Diagnostics","title":"Introduction","text":"Various built-functions run diagnostic procedures evaluate model performance. profile() generic can profile two parameters simultaneously. change likelihood objective function can indicate well parameter informed various data. two-parameter profile can identify potentially strong correlations parameters.  Contour plot change objective function unfished recruitment (x-axis) steepness (y-axis) stock 1. retrospective() evaluates consistency model estimates data time series truncated, starting recent years. diagnostic can inform model behavior future assessments.  Retrospective figure recruitment estimates. summary() generic reports Mohn’s rho. simulate() generic generates new observations sampling probability density functions represented likelihood. Re-fit simulated values ensure estimated parameters retrievable.","code":"prof_df <- profile(fit, \"R0_s[1]\", v1 = seq(750, 850, 25), \"h_s[1]\", v2 = seq(0.75, 0.95, 0.05)) plot(prof_df) ret <- retrospective(fit) report(ret) summary(ret)"},{"path":"https://blue-matter.github.io/MARS/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Quang Huynh. Author, maintainer.","code":""},{"path":"https://blue-matter.github.io/MARS/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Huynh Q (2024). MARS: Multi-stock Assessment Regional Spatiotemporal dynamics. R package version 0.0.0.9000, https://github.com/Blue-Matter/MARS, https://blue-matter.github.io/MARS/.","code":"@Manual{,   title = {MARS: Multi-stock Assessment with Regional Spatiotemporal dynamics},   author = {Quang Huynh},   year = {2024},   note = {R package version 0.0.0.9000, https://github.com/Blue-Matter/MARS},   url = {https://blue-matter.github.io/MARS/}, }"},{"path":"https://blue-matter.github.io/MARS/index.html","id":"mars-","dir":"","previous_headings":"","what":"Multi-stock Assessment with Regional Spatiotemporal dynamics","title":"Multi-stock Assessment with Regional Spatiotemporal dynamics","text":"Multi-stock assessment RTMB MARS (Multi-stock Assessment Regional Spatiotemporal dynamics) multi-stock, spatially-explicit age-structured model. explicit seasonal stock availability movement, MARS intended use mixed fisheries stock composition can readily identified fishery data alone, .e., catch age/length composition. Models can also fitted genetic data, e.g., stock composition catches close-kin pairs. Funding development MARS provided NOAA Fisheries Bluefin Tuna Research Program (BTRP Grant NA23NMF4720184) collaboration Ocean Foundation. Atlantic bluefin tuna (Thunnus thynnus) first intended case study.","code":""},{"path":"https://blue-matter.github.io/MARS/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Multi-stock Assessment with Regional Spatiotemporal dynamics","text":"can install R package GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"Blue-Matter/MARS\")"},{"path":"https://blue-matter.github.io/MARS/reference/AD.html","id":null,"dir":"Reference","previous_headings":"","what":"Additional methods for AD types — AD","title":"Additional methods for AD types — AD","text":"Methods RTMB AD class","code":""},{"path":"https://blue-matter.github.io/MARS/reference/AD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Additional methods for AD types — AD","text":"","code":"# S4 method for class 'ad,matrix' x %*% y  # S3 method for class 'advector' max(..., na.rm)  # S3 method for class 'advector' min(..., na.rm)"},{"path":"https://blue-matter.github.io/MARS/reference/AD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Additional methods for AD types — AD","text":"x AD object y Non-AD matrix ... Objects class advector na.rm used","code":""},{"path":"https://blue-matter.github.io/MARS/reference/AD.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Additional methods for AD types — AD","text":"x %*% y: Matrix product function implemented mixed AD non-AD objects colSums(x * y). See ADmatrix. max(advector): Finds maximum value using CondExpGt() loop min(advector): Finds minimum value using CondExpLt() loop","code":""},{"path":"https://blue-matter.github.io/MARS/reference/CondExpLt.html","id":null,"dir":"Reference","previous_headings":"","what":"If statements compatible with RTMB — CondExpLt","title":"If statements compatible with RTMB — CondExpLt","text":"Convenience functions allow taping gradients RTMB expressions, following corresponding CppAD functions.","code":""},{"path":"https://blue-matter.github.io/MARS/reference/CondExpLt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"If statements compatible with RTMB — CondExpLt","text":"","code":"CondExpLt(left, right, if_true, if_false)  CondExpLe(left, right, if_true, if_false)  CondExpGt(left, right, if_true, if_false)  CondExpGe(left, right, if_true, if_false)  CondExpEq(left, right, if_true, if_false)"},{"path":"https://blue-matter.github.io/MARS/reference/CondExpLt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"If statements compatible with RTMB — CondExpLt","text":"left Numeric left hand side evaluation right Numeric right hand side evaluation if_true Numeric expression true if_false Numeric expression false","code":""},{"path":"https://blue-matter.github.io/MARS/reference/CondExpLt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"If statements compatible with RTMB — CondExpLt","text":"Functions vectorized. CondExpLt evaluates whether left < right CondExpLe evaluates whether left <= right CondExpGt evaluates whether left > right CondExpGe evaluates whether left >= right CondExpEq evaluates whether left == right","code":""},{"path":"https://blue-matter.github.io/MARS/reference/CondExpLt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"If statements compatible with RTMB — CondExpLt","text":"","code":"library(RTMB) TapeConfig(comparison = \"tape\") f <- function(x) CondExpLt(x, 3, 0, x^2) g <- MakeTape(f, numeric(1)) x <- seq(0, 5)  # Does not work! f2 <- function(x) if (x < 3) 0 else x^2 g2 <- MakeTape(f2, numeric(1))  data.frame(x = x, deriv = sapply(x, g$jacobian), deriv2 = sapply(x, g2$jacobian)) #>   x deriv deriv2 #> 1 0     0      0 #> 2 1     0      0 #> 3 2     0      0 #> 4 3     6      0 #> 5 4     8      0 #> 6 5    10      0"},{"path":"https://blue-matter.github.io/MARS/reference/DCKMR-class.html","id":null,"dir":"Reference","previous_headings":"","what":"DCKMR S4 object — DCKMR-class","title":"DCKMR S4 object — DCKMR-class","text":"Store lists data frames parent offspring pairs half-sibling pairs","code":""},{"path":"https://blue-matter.github.io/MARS/reference/DCKMR-class.html","id":"slots-inherited-from-dckmr","dir":"Reference","previous_headings":"","what":"Slots inherited from DCKMR","title":"DCKMR S4 object — DCKMR-class","text":"POP_s list stock data frames parent-offspring pairs. row data frame corresponds \"sampling unit\" defined columns: HSP_s list stock data frames half-sibling pairs. row data frame corresponds \"sampling unit\" defined columns: CKMR_like Character, likelihood POP HSP sampling units. See type argument like_CKMR() options.","code":""},{"path":"https://blue-matter.github.io/MARS/reference/Dfishery-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Dfishery S4 object — Dfishery-class","title":"Dfishery S4 object — Dfishery-class","text":"S4 class organizes various data inputs MARS model. MARSdata simply inherits slots 6 component classes: Dmodel, Dstock, Dfishery, Dsurvey DCKMR, Dtag, D- prefix denotes object model data.","code":""},{"path":"https://blue-matter.github.io/MARS/reference/Dfishery-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dfishery S4 object — Dfishery-class","text":"convenience, arrays matrices associated dimensions variable name. example, Cobs_ymfr represents observed catch dimension following underscore, following template:","code":""},{"path":"https://blue-matter.github.io/MARS/reference/Dfishery-class.html","id":"slots-inherited-from-dfishery","dir":"Reference","previous_headings":"","what":"Slots inherited from Dfishery","title":"Dfishery S4 object — Dfishery-class","text":"nf Integer, number fleets Cobs_ymfr Total fishery catch Csd_ymfr Lognormal standard deviation fishery catch. used Dmodel@condition = \"F\". Default 0.01. fwt_yamfs Fishery weight age. Set 1 fleet catch units abundance. Set stock weight age default. CAAobs_ymafr Fishery catch age composition CALobs_ymlfr Fishery catch length composition fcomp_like Character, likelihood fishery composition data. See type argument like_comp() options CAAN_ymfr Sample size catch age vector season using multinomial Dirichlet-multinomial likelihoods CALN_ymfr Sample size catch length vector season using multinomial Dirichlet-multinomial likelihoods CAAtheta_f Catch age dispersion parameter using Dirichlet-multinomial likelihood. Default set 1. CALtheta_f Catch length dispersion parameter using Dirichlet-multinomial likelihood. Default set 1. sel_block_yf Index dummy fleets model time blocks selectivity sel_f Character vector functional form selectivity. Choose : \"logistic_length\", \"dome_length\", \"logistic_age\", \"dome_age\", \"SB\", \"B\" Cinit_mfr Equilibrium seasonal catch prior first year. One way initialize abundance start first year model. Default zero. SC_ymafrs Stock composition data. SC_aa Boolean matrix aggregates age classes stock composition data. See example. SC_ff Boolean matrix aggregates fleets stock composition data. See example. SC_like Character, likelihood stock composition data. See type argument like_comp() options SCN_ymafr Sample size stock composition vector using multinomial Dirichlet-multinomial likelihoods SCtheta_f Stock composition dispersion parameter using Dirichlet-multinomial likelihood. Default set 1. SCstdev_ymafrs Stock composition standard deviation using lognormal likelihood. Default set 0.1.","code":""},{"path":[]},{"path":"https://blue-matter.github.io/MARS/reference/Dfishery-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dfishery S4 object — Dfishery-class","text":"","code":"# Aggregate stock composition for ages 1-4 and 5-10 across all fleets na <- 10 na_SC <- 2 SC_aa <- matrix(0, na_SC, na) # Assumes dim(SC_ymafrs)[3] = na_SC SC_aa[1, 1:4] <- SC_aa[2, 5:10] <- 1  nf <- 3 nf_SC <- 1 SC_ff <- matrix(1, nf_SC, nf) # Assumes dim(SC_ymafrs)[4] <- nf_SC"},{"path":"https://blue-matter.github.io/MARS/reference/Dlabel-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Dlabel S4 object — Dlabel-class","title":"Dlabel S4 object — Dlabel-class","text":"Vectors labeling plots.","code":""},{"path":"https://blue-matter.github.io/MARS/reference/Dlabel-class.html","id":"slots-inherited-from-dlabel","dir":"Reference","previous_headings":"","what":"Slots inherited from Dlabel","title":"Dlabel S4 object — Dlabel-class","text":"year Vector years. Length Dmodel@ny season Vector season names. Length Dmodel@nm age Vector ages. Length Dmodel@na region Vector region names. Length Dmodel@nr stock Vector stock names. Length Dmodel@ns fleet Vector fleet names. Length Dfishery@nf index Vector index abundance names. Length Dsurvey@ni","code":""},{"path":"https://blue-matter.github.io/MARS/reference/Dmodel-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Dmodel S4 object — Dmodel-class","title":"Dmodel S4 object — Dmodel-class","text":"S4 class organizes various data inputs MARS model. MARSdata simply inherits slots 6 component classes: Dmodel, Dstock, Dfishery, Dsurvey DCKMR, Dtag, D- prefix denotes object model data.","code":""},{"path":"https://blue-matter.github.io/MARS/reference/Dmodel-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dmodel S4 object — Dmodel-class","text":"convenience, arrays matrices associated dimensions variable name. example, Cobs_ymfr represents observed catch dimension following underscore, following template:","code":""},{"path":"https://blue-matter.github.io/MARS/reference/Dmodel-class.html","id":"slots-inherited-from-dmodel","dir":"Reference","previous_headings":"","what":"Slots inherited from Dmodel","title":"Dmodel S4 object — Dmodel-class","text":"ny Integer, number years nm Integer, number seasons na Integer, number ages nl Integer, number length bins. Set zero lengths modeled. nr Integer, number spatial regions ns Integer, number stocks lbin Vector lower boundary length bins. Length nl + 1 lmid Vector midpoint length bins. Length nl Fmax Numeric, maximum allowable instantaneous fishing mortality rate (units per season). Defaults 3. y_phi Integer, year obtain values natural mortality fecundity unfished stock-recruit replacement line (phi). Relevant natural mortality fecundity time-varying. Defaults 1. scale_s Vector, length ns. Multiplicative scaling factor informs relative stock size aid parameter estimation. Larger values implies larger stocks. Default set 1. See make_parameters(). nyinit Integer, number years spool-calculate equilibrium unfished starting conditions population model account seasonal spatial dynamics. numerical spool-needed nm = 1 nr = 1, .e., nyinit = 1. Otherwise, set 1.5 * na default. condition Character, either specify model estimates fishing mortality parameter (\"F\", default) equal catch (\"catch\"). nitF Integer, number iterations solve Baranov catch equation observed catch condition = \"catch\". Defaults 5. y_Fmult_f Integer vector fleet, year directly estimate F. Choose year/season/region combination catch average relative time series. used condition = \"F\". m_Fmult_f Integer vector fleet, season directly estimate F. Choose year/season/region combination catch average relative time series. used condition = \"F\". r_Fmult_f Integer vector fleet, region directly estimate F. Choose year/season/region combination catch average relative time series. used condition = \"F\". prior Character vector evaluated model return log prior parameter. See example documentation prior.","code":""},{"path":[]},{"path":"https://blue-matter.github.io/MARS/reference/Dstock-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Dstock S4 object — Dstock-class","title":"Dstock S4 object — Dstock-class","text":"S4 class organizes various data inputs MARS model. MARSdata simply inherits slots 6 component classes: Dmodel, Dstock, Dfishery, Dsurvey DCKMR, Dtag, D- prefix denotes object model data.","code":""},{"path":"https://blue-matter.github.io/MARS/reference/Dstock-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dstock S4 object — Dstock-class","text":"convenience, arrays matrices associated dimensions variable name. example, Cobs_ymfr represents observed catch dimension following underscore, following template:","code":""},{"path":"https://blue-matter.github.io/MARS/reference/Dstock-class.html","id":"slots-inherited-from-dstock","dir":"Reference","previous_headings":"","what":"Slots inherited from Dstock","title":"Dstock S4 object — Dstock-class","text":"m_spawn Integer, season spawning. Defaults 1. m_rec Integer, season recruitment. Defaults 1. len_ymas Length--age. needed Dmodel@nl > 0. calc_growth() may helpful function. sdlen_ymas Standard deviation length--age LAK_ymals Length--age probability array. empty, values calculated check_data() calc_LAK(). matd_yas Proportion mature age class. Ignored maturity ogive estimated, e.g., fitting close-kin genetic data. swt_ymas Stock weight--age. See calc_growth() example. fec_yas Fecundity, .e., spawning output, mature animals. Default uses stock weight age. Md_yas Natural mortality. Ignored M estimated. SRR_s Character vector stock-recruit relationship stock. See SRR argument calc_recruitment() options. delta_s Fraction season elapses spawning occurs, e.g., midseason spawning occurs delta_s = 0.5. Default zero. presence_rs Logical matrix indicating presence/absence stock s region r. Used constrain movement matrix. Default TRUE stocks regions. natal_rs fraction mature stock s region r spawns time spawning. See example. Default 1 stocks regions.","code":""},{"path":[]},{"path":"https://blue-matter.github.io/MARS/reference/Dstock-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dstock S4 object — Dstock-class","text":"","code":"# Set natal_rs matrix so that the spawning output of stock 1 is # calculated from mature animals present in regions 1, 2. # Similarly for stock 2, spawning output from areas 2 and 3. nr <- 4 ns <- 2 natal_rs <- matrix(0, nr, ns) natal_rs[1:2, 1] <- natal_rs[2:3, 2] <- 1"},{"path":"https://blue-matter.github.io/MARS/reference/Dsurvey-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Dsurvey S4 object — Dsurvey-class","title":"Dsurvey S4 object — Dsurvey-class","text":"S4 class organizes various data inputs MARS model. MARSdata simply inherits slots 6 component classes: Dmodel, Dstock, Dfishery, Dsurvey DCKMR, Dtag, D- prefix denotes object model data.","code":""},{"path":"https://blue-matter.github.io/MARS/reference/Dsurvey-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dsurvey S4 object — Dsurvey-class","text":"convenience, arrays matrices associated dimensions variable name. example, Cobs_ymfr represents observed catch dimension following underscore, following template:","code":""},{"path":"https://blue-matter.github.io/MARS/reference/Dsurvey-class.html","id":"slots-inherited-from-dsurvey","dir":"Reference","previous_headings":"","what":"Slots inherited from Dsurvey","title":"Dsurvey S4 object — Dsurvey-class","text":"ni Integer, number indices abundance. Zero possible. Iobs_ymi Observed indices Isd_ymi Lognormal standard deviation observed indices unit_i Character vector, units index. Set \"B\" use stock weight age (default) \"N\" abundance (numbers). IAAobs_ymai Survey age composition IALobs_ymli Survey length composition icomp_like Character, likelihood composition data. See like_comp() options IAAN_ymi Sample size index age composition season using multinomial Dirichlet-multinomial likelihoods IALN_ymi Sample size index length composition season using multinomial Dirichlet-multinomial likelihoods IAAtheta_i Index age composition dispersion parameter using Dirichlet-multinomial likelihood IALtheta_i Index length composition dispersion parameter using Dirichlet-multinomial likelihood samp_irs Boolean array specifies regions stocks sampled index. samp[, r, s] indicates whether index operates region r catches stock s. sel_i Character matrix functional forms selectivity. See \"type\" argument conv_selpar() options. delta_i elapsed fraction time seasonal time step index samples population.","code":""},{"path":[]},{"path":"https://blue-matter.github.io/MARS/reference/Dtag-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Dtag S4 object — Dtag-class","title":"Dtag S4 object — Dtag-class","text":"S4 class organizes various data inputs MARS model. MARSdata simply inherits slots 6 component classes: Dmodel, Dstock, Dfishery, Dsurvey DCKMR, Dtag, D- prefix denotes object model data.","code":""},{"path":"https://blue-matter.github.io/MARS/reference/Dtag-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dtag S4 object — Dtag-class","text":"convenience, arrays matrices associated dimensions variable name. example, Cobs_ymfr represents observed catch dimension following underscore, following template:","code":""},{"path":"https://blue-matter.github.io/MARS/reference/Dtag-class.html","id":"slots-inherited-from-dtag","dir":"Reference","previous_headings":"","what":"Slots inherited from Dtag","title":"Dtag S4 object — Dtag-class","text":"tag_ymarrs Array. Number tags move regions. Informs movement matrices stocks time steps. tag_ymars Array. Number tags distributed among regions. Informs stock distribution (within time step). tag_yy Boolean matrix aggregates years tag data. used tag movement array tag_ymarrs. tag_aa Boolean matrix aggregates ages tag data. tag_like Character. Likelihood tagging data, either vector proportions region origin tag_ymarrs, region stock distribution tag_ymars. See type argument like_comp() options tagN_ymars Array. Sample size tag movement vectors using multinomial Dirichlet-multinomial likelihoods. tagN_ymas Array. Sample size tag distribution vectors using multinomial Dirichlet-multinomial likelihoods. tagtheta_s Array. Tag dispersion parameter (stock) using Dirichlet-multinomial likelihoods. Default set 1. tagstdev_s Array. Tag standard deviation (stock) using lognormal likelihood. Default set 0.1.","code":""},{"path":[]},{"path":"https://blue-matter.github.io/MARS/reference/MARS-package.html","id":null,"dir":"Reference","previous_headings":"","what":"MARS: Multi-stock Assessment with Regional Spatiotemporal dynamics — MARS-package","title":"MARS: Multi-stock Assessment with Regional Spatiotemporal dynamics — MARS-package","text":"Implementation next-generation, multi-stock assessment.","code":""},{"path":[]},{"path":"https://blue-matter.github.io/MARS/reference/MARS-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"MARS: Multi-stock Assessment with Regional Spatiotemporal dynamics — MARS-package","text":"Maintainer: Quang Huynh quang@bluematterscience.com (ORCID)","code":""},{"path":"https://blue-matter.github.io/MARS/reference/MARSassess-class.html","id":null,"dir":"Reference","previous_headings":"","what":"MARSassess S4 object — MARSassess-class","title":"MARSassess S4 object — MARSassess-class","text":"S4 object returns output MARS model","code":""},{"path":"https://blue-matter.github.io/MARS/reference/MARSassess-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"MARSassess S4 object — MARSassess-class","text":"obj RTMB object returned RTMB::MakeADFun() opt List returned stats::nlminb() SD List returned TMB::sdreport() report List model output parameter estimates, returned obj$report(obj$env$last.par.best) Misc List, miscellaneous items","code":""},{"path":"https://blue-matter.github.io/MARS/reference/MARSdata-class.html","id":null,"dir":"Reference","previous_headings":"","what":"MARSdata S4 object — MARSdata-class","title":"MARSdata S4 object — MARSdata-class","text":"S4 class organizes various data inputs MARS model. MARSdata simply inherits slots 6 component classes: Dmodel, Dstock, Dfishery, Dsurvey DCKMR, Dtag, D- prefix denotes object model data.","code":""},{"path":"https://blue-matter.github.io/MARS/reference/MARSdata-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"MARSdata S4 object — MARSdata-class","text":"convenience, arrays matrices associated dimensions variable name. example, Cobs_ymfr represents observed catch dimension following underscore, following template:","code":""},{"path":"https://blue-matter.github.io/MARS/reference/MARSdata-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"MARSdata S4 object — MARSdata-class","text":"Dmodel Class Dmodel containing parameters model structure (number years, ages, etc.) Dstock Class Dstock containing stock parameters (growth, natural mortality, etc.) Dfishery Class Dfishery containing fishery data (catch, size stock composition, etc.) Dsurvey Class Dsurvey containing survey data (indices abundance) DCKMR Class DCKMR containing genetic close-kin data Dtag Class Dtag containing tagging data Dlabel Class Dlabel containing names various dimensions. Used plotting. Misc List miscellaneous inputs needed","code":""},{"path":"https://blue-matter.github.io/MARS/reference/MARSdata-class.html","id":"slots-inherited-from-dmodel","dir":"Reference","previous_headings":"","what":"Slots inherited from Dmodel","title":"MARSdata S4 object — MARSdata-class","text":"ny Integer, number years nm Integer, number seasons na Integer, number ages nl Integer, number length bins. Set zero lengths modeled. nr Integer, number spatial regions ns Integer, number stocks lbin Vector lower boundary length bins. Length nl + 1 lmid Vector midpoint length bins. Length nl Fmax Numeric, maximum allowable instantaneous fishing mortality rate (units per season). Defaults 3. y_phi Integer, year obtain values natural mortality fecundity unfished stock-recruit replacement line (phi). Relevant natural mortality fecundity time-varying. Defaults 1. scale_s Vector, length ns. Multiplicative scaling factor informs relative stock size aid parameter estimation. Larger values implies larger stocks. Default set 1. See make_parameters(). nyinit Integer, number years spool-calculate equilibrium unfished starting conditions population model account seasonal spatial dynamics. numerical spool-needed nm = 1 nr = 1, .e., nyinit = 1. Otherwise, set 1.5 * na default. condition Character, either specify model estimates fishing mortality parameter (\"F\", default) equal catch (\"catch\"). nitF Integer, number iterations solve Baranov catch equation observed catch condition = \"catch\". Defaults 5. y_Fmult_f Integer vector fleet, year directly estimate F. Choose year/season/region combination catch average relative time series. used condition = \"F\". m_Fmult_f Integer vector fleet, season directly estimate F. Choose year/season/region combination catch average relative time series. used condition = \"F\". r_Fmult_f Integer vector fleet, region directly estimate F. Choose year/season/region combination catch average relative time series. used condition = \"F\". prior Character vector evaluated model return log prior parameter. See example documentation prior.","code":""},{"path":"https://blue-matter.github.io/MARS/reference/MARSdata-class.html","id":"slots-inherited-from-dstock","dir":"Reference","previous_headings":"","what":"Slots inherited from Dstock","title":"MARSdata S4 object — MARSdata-class","text":"m_spawn Integer, season spawning. Defaults 1. m_rec Integer, season recruitment. Defaults 1. len_ymas Length--age. needed Dmodel@nl > 0. calc_growth() may helpful function. sdlen_ymas Standard deviation length--age LAK_ymals Length--age probability array. empty, values calculated check_data() calc_LAK(). matd_yas Proportion mature age class. Ignored maturity ogive estimated, e.g., fitting close-kin genetic data. swt_ymas Stock weight--age. See calc_growth() example. fec_yas Fecundity, .e., spawning output, mature animals. Default uses stock weight age. Md_yas Natural mortality. Ignored M estimated. SRR_s Character vector stock-recruit relationship stock. See SRR argument calc_recruitment() options. delta_s Fraction season elapses spawning occurs, e.g., midseason spawning occurs delta_s = 0.5. Default zero. presence_rs Logical matrix indicating presence/absence stock s region r. Used constrain movement matrix. Default TRUE stocks regions. natal_rs fraction mature stock s region r spawns time spawning. See example. Default 1 stocks regions.","code":""},{"path":"https://blue-matter.github.io/MARS/reference/MARSdata-class.html","id":"slots-inherited-from-dfishery","dir":"Reference","previous_headings":"","what":"Slots inherited from Dfishery","title":"MARSdata S4 object — MARSdata-class","text":"nf Integer, number fleets Cobs_ymfr Total fishery catch Csd_ymfr Lognormal standard deviation fishery catch. used Dmodel@condition = \"F\". Default 0.01. fwt_yamfs Fishery weight age. Set 1 fleet catch units abundance. Set stock weight age default. CAAobs_ymafr Fishery catch age composition CALobs_ymlfr Fishery catch length composition fcomp_like Character, likelihood fishery composition data. See type argument like_comp() options CAAN_ymfr Sample size catch age vector season using multinomial Dirichlet-multinomial likelihoods CALN_ymfr Sample size catch length vector season using multinomial Dirichlet-multinomial likelihoods CAAtheta_f Catch age dispersion parameter using Dirichlet-multinomial likelihood. Default set 1. CALtheta_f Catch length dispersion parameter using Dirichlet-multinomial likelihood. Default set 1. sel_block_yf Index dummy fleets model time blocks selectivity sel_f Character vector functional form selectivity. Choose : \"logistic_length\", \"dome_length\", \"logistic_age\", \"dome_age\", \"SB\", \"B\" Cinit_mfr Equilibrium seasonal catch prior first year. One way initialize abundance start first year model. Default zero. SC_ymafrs Stock composition data. SC_aa Boolean matrix aggregates age classes stock composition data. See example. SC_ff Boolean matrix aggregates fleets stock composition data. See example. SC_like Character, likelihood stock composition data. See type argument like_comp() options SCN_ymafr Sample size stock composition vector using multinomial Dirichlet-multinomial likelihoods SCtheta_f Stock composition dispersion parameter using Dirichlet-multinomial likelihood. Default set 1. SCstdev_ymafrs Stock composition standard deviation using lognormal likelihood. Default set 0.1.","code":""},{"path":"https://blue-matter.github.io/MARS/reference/MARSdata-class.html","id":"slots-inherited-from-dsurvey","dir":"Reference","previous_headings":"","what":"Slots inherited from Dsurvey","title":"MARSdata S4 object — MARSdata-class","text":"ni Integer, number indices abundance. Zero possible. Iobs_ymi Observed indices Isd_ymi Lognormal standard deviation observed indices unit_i Character vector, units index. Set \"B\" use stock weight age (default) \"N\" abundance (numbers). IAAobs_ymai Survey age composition IALobs_ymli Survey length composition icomp_like Character, likelihood composition data. See like_comp() options IAAN_ymi Sample size index age composition season using multinomial Dirichlet-multinomial likelihoods IALN_ymi Sample size index length composition season using multinomial Dirichlet-multinomial likelihoods IAAtheta_i Index age composition dispersion parameter using Dirichlet-multinomial likelihood IALtheta_i Index length composition dispersion parameter using Dirichlet-multinomial likelihood samp_irs Boolean array specifies regions stocks sampled index. samp[, r, s] indicates whether index operates region r catches stock s. sel_i Character matrix functional forms selectivity. See \"type\" argument conv_selpar() options. delta_i elapsed fraction time seasonal time step index samples population.","code":""},{"path":"https://blue-matter.github.io/MARS/reference/MARSdata-class.html","id":"slots-inherited-from-dckmr","dir":"Reference","previous_headings":"","what":"Slots inherited from DCKMR","title":"MARSdata S4 object — MARSdata-class","text":"POP_s list stock data frames parent-offspring pairs. row data frame corresponds \"sampling unit\" defined columns: HSP_s list stock data frames half-sibling pairs. row data frame corresponds \"sampling unit\" defined columns: CKMR_like Character, likelihood POP HSP sampling units. See type argument like_CKMR() options.","code":""},{"path":"https://blue-matter.github.io/MARS/reference/MARSdata-class.html","id":"slots-inherited-from-dtag","dir":"Reference","previous_headings":"","what":"Slots inherited from Dtag","title":"MARSdata S4 object — MARSdata-class","text":"tag_ymarrs Array. Number tags move regions. Informs movement matrices stocks time steps. tag_ymars Array. Number tags distributed among regions. Informs stock distribution (within time step). tag_yy Boolean matrix aggregates years tag data. used tag movement array tag_ymarrs. tag_aa Boolean matrix aggregates ages tag data. tag_like Character. Likelihood tagging data, either vector proportions region origin tag_ymarrs, region stock distribution tag_ymars. See type argument like_comp() options tagN_ymars Array. Sample size tag movement vectors using multinomial Dirichlet-multinomial likelihoods. tagN_ymas Array. Sample size tag distribution vectors using multinomial Dirichlet-multinomial likelihoods. tagtheta_s Array. Tag dispersion parameter (stock) using Dirichlet-multinomial likelihoods. Default set 1. tagstdev_s Array. Tag standard deviation (stock) using lognormal likelihood. Default set 0.1.","code":""},{"path":"https://blue-matter.github.io/MARS/reference/MARSdata-class.html","id":"slots-inherited-from-dlabel","dir":"Reference","previous_headings":"","what":"Slots inherited from Dlabel","title":"MARSdata S4 object — MARSdata-class","text":"year Vector years. Length Dmodel@ny season Vector season names. Length Dmodel@nm age Vector ages. Length Dmodel@na region Vector region names. Length Dmodel@nr stock Vector stock names. Length Dmodel@ns fleet Vector fleet names. Length Dfishery@nf index Vector index abundance names. Length Dsurvey@ni","code":""},{"path":[]},{"path":"https://blue-matter.github.io/MARS/reference/MARSdata-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MARSdata S4 object — MARSdata-class","text":"","code":"# Set natal_rs matrix so that the spawning output of stock 1 is # calculated from mature animals present in regions 1, 2. # Similarly for stock 2, spawning output from areas 2 and 3. nr <- 4 ns <- 2 natal_rs <- matrix(0, nr, ns) natal_rs[1:2, 1] <- natal_rs[2:3, 2] <- 1  # Aggregate stock composition for ages 1-4 and 5-10 across all fleets na <- 10 na_SC <- 2 SC_aa <- matrix(0, na_SC, na) # Assumes dim(SC_ymafrs)[3] = na_SC SC_aa[1, 1:4] <- SC_aa[2, 5:10] <- 1  nf <- 3 nf_SC <- 1 SC_ff <- matrix(1, nf_SC, nf) # Assumes dim(SC_ymafrs)[4] <- nf_SC"},{"path":"https://blue-matter.github.io/MARS/reference/calc_F.html","id":null,"dir":"Reference","previous_headings":"","what":"Newton-Raphson search for fishing mortality — calc_F","title":"Newton-Raphson search for fishing mortality — calc_F","text":"Performs root finding routine find index F minimizes difference observed catch value predicted Baranov equation.","code":""},{"path":"https://blue-matter.github.io/MARS/reference/calc_F.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Newton-Raphson search for fishing mortality — calc_F","text":"","code":"calc_F(   Cobs,   N,   sel,   wt,   M,   q_fs,   delta = 1,   na = dim(N)[1],   nr = dim(N)[2],   ns = dim(N)[3],   nf = length(Cobs),   Fmax = 2,   nitF = 5L,   trans = c(\"log\", \"logit\") )"},{"path":"https://blue-matter.github.io/MARS/reference/calc_F.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Newton-Raphson search for fishing mortality — calc_F","text":"Cobs Observed catch. Matrix [f, r] N Stock abundance beginning time step. Array [, r, s] sel Selectivity. Array [, f, s] wt Fishery weight age. Array [, f, s] M Instantaneous natural mortality. Units per year [, s] q_fs Relative catchability stock s fleet f. Defaults 1 missing. Matrix [f, s] delta Numeric, duration time years corresponding observed catch, e.g., 0.25 quarterly time step. na Integer, number age classes nr Integer, number regions ns Integer, number stocks nf Integer, number fleets Fmax Numeric, maximum Findex value nitF Integer, number iterations Newton-Raphson routine trans Whether perform search log logit space","code":""},{"path":"https://blue-matter.github.io/MARS/reference/calc_F.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Newton-Raphson search for fishing mortality — calc_F","text":"list containing: F_afrs Fishing mortality array F_ars Fishing mortality array (summed across fleets) Z_ars Total mortality array F_index Index fishing mortality. Matrix [f, r] CB_frs Catch (biomass) array CN_afrs Catch (abundance) array VB_afrs Vulnerable biomass beginning time step. Array penalty Penalty term returned posfun() F_index exceeds Fmax fn Difference predicted observed catch last iteration. Matrix [f, r] gr Gradient fn respect F_index either log logit space last iteration. Vector [f, r]","code":""},{"path":"https://blue-matter.github.io/MARS/reference/calc_F.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Newton-Raphson search for fishing mortality — calc_F","text":"predicted catch fleet f region r $$ C^{\\textrm{pred}}_{f,r} = \\sum_s \\sum_a v_{,f,s} q_{f,s} F_{f,r} \\dfrac{1 - \\exp(-Z_{,r,s})}{Z_{,r,s}} N_{,r,s} w_{,f,s} $$ Newton-Raphson routine minimizes \\(f(x_{f,r}) = C_{f,r}^{\\textrm{pred}} - C_{f,r}^{\\textrm{obs}}\\). trans = \"log\", \\(F_{f,r} = \\exp(x_{f,r})\\). trans = \"logit\", \\(F_{f,r} = F_{\\textrm{max}}/(1 + \\exp(x_{f,r}))\\). gradient respect \\(\\vec{x}\\) $$ f'(x_{f,r}) = \\sum_s \\sum_a v_{,f,s} q_{f,s} N_{,r,s} w_{,f,s} \\left(\\dfrac{\\alpha\\gamma}{\\beta}\\right)' $$ $$ \\left(\\dfrac{\\alpha\\gamma}{\\beta}\\right)' = \\dfrac{(\\alpha\\gamma' + \\alpha'\\gamma)\\beta - \\alpha\\gamma\\beta'}{\\beta^2} $$ trans = \"log\", \\(\\alpha'_{f,r} = \\alpha_{f,r}\\). trans = \"logit\", \\(\\alpha'_{f,r} = F_{\\textrm{max}}\\exp(-x_{f,r})/(1 + \\exp(-x_{f,r}))^2\\). function solves \\(\\vec{x}\\) iterating \\(f(\\vec{x})\\) approaches zero, vector arrow indexes fleet region. iteration \\(+1\\): $$\\vec{x}_{+1} = \\vec{x}_i - \\dfrac{f(\\vec{x}_i)}{f'(\\vec{x}_i)}$$.","code":""},{"path":"https://blue-matter.github.io/MARS/reference/calc_F.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Newton-Raphson search for fishing mortality — calc_F","text":"Q. Huynh","code":""},{"path":"https://blue-matter.github.io/MARS/reference/calc_LAK.html","id":null,"dir":"Reference","previous_headings":"","what":"Length-at-age key — calc_LAK","title":"Length-at-age key — calc_LAK","text":"Calculates probability distribution length--age using normal probability density function","code":""},{"path":"https://blue-matter.github.io/MARS/reference/calc_LAK.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Length-at-age key — calc_LAK","text":"","code":"calc_LAK(len_a, sd_la, lbin, nl = length(lbin) - 1)"},{"path":"https://blue-matter.github.io/MARS/reference/calc_LAK.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Length-at-age key — calc_LAK","text":"len_a Vector length--age sd_la Vector standard deviation length--age lbin Vector lower boundary length bins nl Integer, number length bins (default length(lbin) - 1)","code":""},{"path":"https://blue-matter.github.io/MARS/reference/calc_LAK.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Length-at-age key — calc_LAK","text":"Matrix age (rows) length (columns)","code":""},{"path":"https://blue-matter.github.io/MARS/reference/calc_POP.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict the probability of CKMR kinship pairs — calc_POP","title":"Predict the probability of CKMR kinship pairs — calc_POP","text":"Calculate probability observing parent-offspring pair (calc_POP) half-sibling pair (calc_HSP) closed-kin mark recapture (CKMR) age-structured model.","code":""},{"path":"https://blue-matter.github.io/MARS/reference/calc_POP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict the probability of CKMR kinship pairs — calc_POP","text":"","code":"calc_POP(t, a, y, N, fec)  calc_HSP(yi, yj, N, fec, Z)"},{"path":"https://blue-matter.github.io/MARS/reference/calc_POP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict the probability of CKMR kinship pairs — calc_POP","text":"t Vector, capture year parent Vector, age capture parent y Vector, birth year offspring j N Abundance mature spawners. Matrix [y, ] fec Fecundity schedule mature spawners. Matrix [y, ] yi Vector, birth year sibling . Must older sibling j. yj Vector, birth year sibling j. Z Instantaneous total mortality rate. Matrix [y, ]","code":""},{"path":"https://blue-matter.github.io/MARS/reference/calc_POP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict the probability of CKMR kinship pairs — calc_POP","text":"vector probabilities.","code":""},{"path":"https://blue-matter.github.io/MARS/reference/calc_POP.html","id":"parent-offspring-pairs","dir":"Reference","previous_headings":"","what":"Parent-offspring pairs","title":"Predict the probability of CKMR kinship pairs — calc_POP","text":"parent-offspring probability calculated Bravington et al. 2016, eq 3.4: $$p_{\\textrm{POP}} = 2 \\times \\dfrac{f(y_j,y_j - (t_i - a_i))}{\\sum_a f(y_j,) N(y_j,)}$$ \\(y_j - (t_i - a_i)\\) parental age year \\(y_j\\). Scalar 2 accounts fact parent either mother father. calc_POP vectorized respect t, , y.","code":""},{"path":"https://blue-matter.github.io/MARS/reference/calc_POP.html","id":"half-sibling-pairs","dir":"Reference","previous_headings":"","what":"Half-sibling pairs","title":"Predict the probability of CKMR kinship pairs — calc_POP","text":"half-sibling probability calculated Bravington et al. 2016, eq 3.10, expanded Hillary et al. 2018, Supplement S2.8.1 age-specific survival fecundity parent: $$p_{\\textrm{HSP}} = 4 \\times \\sum_a\\left( \\dfrac{N(y_i, )f(y_i, )}{\\sum_{'} N(y_i, ')f(y_i,')}\\times \\exp(-\\sum_{t = 0}^{y_j - y_i - 1} Z(y_i + t,+ t))\\times \\dfrac{f(y_j,+y_j-y_i)}{\\sum_{'} N(y_j,')f(y_j,')} \\right) $$ first ratio probability fish age \\(\\) year \\(y_i\\) parent \\(\\). exponential term fish's survival year \\(y_i\\) \\(y_j\\). second ratio probability parent \\(\\), age \\(+y_j-y_i\\) year \\(y_j\\), parent \\(j\\). parent observed HSP, sum probabilities potential ages year \\(y_i\\). calc_HSP vectorized respect yi yj.","code":""},{"path":"https://blue-matter.github.io/MARS/reference/calc_POP.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Predict the probability of CKMR kinship pairs — calc_POP","text":"Bravington, M.V. et al. 2016. Close-Kin Mark-Recapture. Stat. Sci. 31: 259-274. doi:10.1214/16-STS552 Hillary, R.M. et al. 2018. Genetic relatedness reveals total population size white sharks eastern Australia New Zealand. Sci. Rep. 8: 2661. doi:10.1038/s41598-018-20593-w","code":""},{"path":[]},{"path":"https://blue-matter.github.io/MARS/reference/calc_POP.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Predict the probability of CKMR kinship pairs — calc_POP","text":"Q. Huynh contribution Y. Tsukahara (Fisheries Research Institute, Japan)","code":""},{"path":"https://blue-matter.github.io/MARS/reference/calc_eqdist.html","id":null,"dir":"Reference","previous_headings":"","what":"Equilibrium distribution from movement matrix — calc_eqdist","title":"Equilibrium distribution from movement matrix — calc_eqdist","text":"Applies movement matrix several times order obtain equilibrium spatial distribution movement matrix. used model useful reporting.","code":""},{"path":"https://blue-matter.github.io/MARS/reference/calc_eqdist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Equilibrium distribution from movement matrix — calc_eqdist","text":"","code":"calc_eqdist(x, nr = dim(x)[2], start = rep(1/nr, nr), nit = 20)"},{"path":"https://blue-matter.github.io/MARS/reference/calc_eqdist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Equilibrium distribution from movement matrix — calc_eqdist","text":"x Movement matrix, square matrix rows corresponding origin (sum 1), columns corresponding destination nr Number regions start initial distribution. Vector length nr nit Integer, number times movement matrix applied","code":""},{"path":"https://blue-matter.github.io/MARS/reference/calc_eqdist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Equilibrium distribution from movement matrix — calc_eqdist","text":"Numeric vector length nr","code":""},{"path":"https://blue-matter.github.io/MARS/reference/calc_growth.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate von Bertalanffy length-at-age — calc_growth","title":"Calculate von Bertalanffy length-at-age — calc_growth","text":"Returns array length--age seasonal dimension. Useful MARSdata inputs.","code":""},{"path":"https://blue-matter.github.io/MARS/reference/calc_growth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate von Bertalanffy length-at-age — calc_growth","text":"","code":"calc_growth(   Linf_s,   K_s,   t0_s,   ns = length(Linf_s),   nm = 4,   ny = 20,   a = seq(1, 10) )"},{"path":"https://blue-matter.github.io/MARS/reference/calc_growth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate von Bertalanffy length-at-age — calc_growth","text":"Linf_s Vector stock s asymptotic length K_s Vector stock s growth coefficient t0_s Vector s age length zero. ns Integer, number stocks nm Integer, number seasons ny Integer, number years Integer vector ages","code":""},{"path":"https://blue-matter.github.io/MARS/reference/calc_growth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate von Bertalanffy length-at-age — calc_growth","text":"Array [y, m, , s]","code":""},{"path":"https://blue-matter.github.io/MARS/reference/calc_growth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate von Bertalanffy length-at-age — calc_growth","text":"","code":"len_ymas <- calc_growth(c(30, 40), c(0.4, 0.2), c(-1, -1))  # Calculate stock weight at age a_s <- rep(1e-6, 2) b_s <- c(3, 3.1)  ns <- length(a_s) swt_ymas <- sapply(1:ns, function(s) {   a_s[s]*len_ymas[, , , s]^b_s[s] }, simplify = \"array\")"},{"path":"https://blue-matter.github.io/MARS/reference/calc_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate index at age — calc_index","title":"Calculate index at age — calc_index","text":"indices abundance, function calculates numbers vulnerable survey.","code":""},{"path":"https://blue-matter.github.io/MARS/reference/calc_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate index at age — calc_index","text":"","code":"calc_index(   N,   Z,   sel,   na = dim(N)[1],   nr = dim(N)[2],   ns = dim(N)[3],   ni = dim(sel)[2],   samp = array(1, c(ni, nr, ns)),   delta = rep(0, ni) )"},{"path":"https://blue-matter.github.io/MARS/reference/calc_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate index at age — calc_index","text":"N Stock abundance beginning time step. Array [, r, s] Z Instantaneous total mortality. Array [, r, s] sel Index selectivity. Array [, , s] na Integer, number age classes nr Integer, number regions ns Integer, number stocks ni Integer, number indices samp Boolean indicates regions stocks sampled index. Array [, r, s] delta Fraction time step index samples population. Vector ","code":""},{"path":"https://blue-matter.github.io/MARS/reference/calc_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate index at age — calc_index","text":"Index age. Array [, , s]","code":""},{"path":"https://blue-matter.github.io/MARS/reference/calc_index.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate index at age — calc_index","text":"index calculated $$ I_{,,s} = v_{,,s} \\sum_r N_{,r,s} \\exp(-\\delta_i Z_{,r,s}) \\times \\mathbb{1}(r \\R_i) \\mathbb{1}(s \\S_i) $$ \\(R_i\\) \\(S_i\\) denote regions stocks, respectively, sampled index \\(\\). example, \\(R_2 = 1\\) denotes second index abundance samples region 1. informed array samp samp[, r, s] = 1 indicates stock s region r sampled index .","code":""},{"path":"https://blue-matter.github.io/MARS/reference/calc_nextN.html","id":null,"dir":"Reference","previous_headings":"","what":"Project stock abundance to the next time step — calc_nextN","title":"Project stock abundance to the next time step — calc_nextN","text":"function generates abundance array calculating survival current mortality, advances age classes, re-distributes stock, adds recruitment.","code":""},{"path":"https://blue-matter.github.io/MARS/reference/calc_nextN.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Project stock abundance to the next time step — calc_nextN","text":"","code":"calc_nextN(   N,   surv,   na = dim(N)[1],   nr = dim(N)[2],   ns = dim(N)[3],   advance_age = TRUE,   R = numeric(ns),   mov = array(1/nr, c(na, nr, nr, ns)),   recdist = matrix(1/nr, nr, ns),   plusgroup = TRUE )"},{"path":"https://blue-matter.github.io/MARS/reference/calc_nextN.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Project stock abundance to the next time step — calc_nextN","text":"N Abundance current time step. Array [, r, s] surv Survival current time step. Array [, r, s] na Integer, number age classes nr Integer, number regions ns Integer, number stocks advance_age Logical, whether animals advance next age class R Incoming total recruitment. Vector length s. assigned advance_age = TRUE. mov Movement array next time step. Array [, r, r, s]. Rows denote region origin columns denote region destination. recdist Distribution incoming recruitment. Matrix [r, s]. assigned advance_age = TRUE. plusgroup Logical, whether last age class accumulator plus group.","code":""},{"path":"https://blue-matter.github.io/MARS/reference/calc_nextN.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Project stock abundance to the next time step — calc_nextN","text":"Abundance next time step. Array [, r, s]","code":""},{"path":"https://blue-matter.github.io/MARS/reference/calc_phi_project.html","id":null,"dir":"Reference","previous_headings":"","what":"Equilibrium spawners per recruit by projection — calc_phi_project","title":"Equilibrium spawners per recruit by projection — calc_phi_project","text":"Project population forward time using calc_population() constant recruitment seasonal dynamics (growth, movement--season) obtain per recruit parameters. Note fishing mortality among fleets stocks remain linked matrix q_fs.","code":""},{"path":"https://blue-matter.github.io/MARS/reference/calc_phi_project.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Equilibrium spawners per recruit by projection — calc_phi_project","text":"","code":"calc_phi_project(   ny,   nm,   na,   nf = 1,   nr,   ns = 1,   F_mfr = array(0, c(nm, nf, nr)),   sel_mafs = array(1, c(nm, na, nf, ns)),   fwt_mafs = array(1, c(nm, na, nf, ns)),   q_fs = matrix(1, nf, ns),   M_as,   mov_marrs,   mat_as,   fec_as,   m_spawn = 1,   m_rec = 1,   delta_s = rep(0, ns),   natal_rs = matrix(1, nr, ns),   recdist_rs = matrix(1/nr, nr, ns) )"},{"path":"https://blue-matter.github.io/MARS/reference/calc_phi_project.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Equilibrium spawners per recruit by projection — calc_phi_project","text":"ny Integer, number years projection nm Integer, number seasons na Integer, number age classes nf Integer, number fleets nr Integer, number regions ns Integer, number stocks F_mfr Equilibrium fishing mortality (per season). Matrix [m, f, r] sel_mafs Selectivity season, age, fleet, stock. Array [m, , f, s] fwt_mafs Fishery weight array season, age, fleet, stock. Array [m, , r, r]. Can used calculate yield per recruit. q_fs Relative catchability stock s fleet f. Defaults 1 missing. Matrix [f, s] M_as Natural mortality. Matrix [, s] mov_marrs Movement array [m, , r, r, s]. missing, uses diagonal matrix (movement among areas). mat_as Maturity age. Matrix [, s] fec_as Fecundity age. Matrix [, s] m_spawn Integer, season spawning m_rec Integer, season recruitment delta_s Numeric vector s. Fraction season elapses spawning occurs, e.g., midseason spawning delta_s = 0.5. natal_rs Matrix [r, s]. fraction mature stock s region r spawns time spawning. See example Dstock. recdist_rs Matrix [r, s]. fraction incoming recruitment stock s settles region r.","code":""},{"path":"https://blue-matter.github.io/MARS/reference/calc_phi_project.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Equilibrium spawners per recruit by projection — calc_phi_project","text":"named list returned calc_population().","code":""},{"path":"https://blue-matter.github.io/MARS/reference/calc_phi_project.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Equilibrium spawners per recruit by projection — calc_phi_project","text":"initial population vector survival age evenly number regions nr.","code":""},{"path":[]},{"path":"https://blue-matter.github.io/MARS/reference/calc_phi_simple.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple spawners per recruit calculation — calc_phi_simple","title":"Simple spawners per recruit calculation — calc_phi_simple","text":"Calculate spawners per recruit individual stock. Appropriate population model single spatial area annual time steps, .e. single season.","code":""},{"path":"https://blue-matter.github.io/MARS/reference/calc_phi_simple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple spawners per recruit calculation — calc_phi_simple","text":"","code":"calc_phi_simple(Z, fec_a, mat_a, delta = 0)  calc_NPR(Z, na = length(Z), plusgroup = TRUE)"},{"path":"https://blue-matter.github.io/MARS/reference/calc_phi_simple.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple spawners per recruit calculation — calc_phi_simple","text":"Z Total mortality age fec_a Fecundity age. Vector mat_a Maturity age. Vector delta Fraction season elapses spawning occurs, e.g., midseason spawning delta = 0.5. na Integer, number age classes plusgroup Logical, whether largest age class plusgroup accumulator age","code":""},{"path":"https://blue-matter.github.io/MARS/reference/calc_phi_simple.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple spawners per recruit calculation — calc_phi_simple","text":"calc_phi_simple() returns spawners per recruit. calc_NPR() returns vector numbers per recruit age, .e., survival.","code":""},{"path":[]},{"path":"https://blue-matter.github.io/MARS/reference/calc_population.html","id":null,"dir":"Reference","previous_headings":"","what":"Multi-fleet, multi-area, multi-stock population dynamics model — calc_population","title":"Multi-fleet, multi-area, multi-stock population dynamics model — calc_population","text":"Project age-structured populations forward time. Frequently used calculate equilibrium abundance biomass analytic solution due seasonal movement.","code":""},{"path":"https://blue-matter.github.io/MARS/reference/calc_population.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multi-fleet, multi-area, multi-stock population dynamics model — calc_population","text":"","code":"calc_population(   ny = 10,   nm = 4,   na = 20,   nf = 1,   nr = 4,   ns = 2,   initN_ars = array(1, c(na, nr, ns)),   mov_ymarrs,   M_yas = array(0.3, c(ny, na, ns)),   SRR_s = rep(\"BH\", ns),   sralpha_s = rep(1e+16, ns),   srbeta_s = rep(1e+16, ns),   mat_yas = array(1, c(ny, na, ns)),   fec_yas = array(1, c(ny, na, ns)),   Rdev_ys = matrix(1, ny, ns),   m_spawn = 1,   m_rec = 1,   delta_s = rep(0, ns),   natal_rs = matrix(1, nr, ns),   recdist_rs = matrix(1/nr, nr, ns),   fwt_ymafs = array(1, c(ny, nm, na, nf, ns)),   q_fs = matrix(1, nf, ns),   sel_ymafs = array(1, c(ny, nm, na, nf, ns)),   condition = c(\"F\", \"catch\"),   F_ymfr = array(0, c(ny, nm, nf, nr)),   Cobs_ymfr = matrix(1e-08, c(ny, nm, nf, nr)),   Fmax = 2,   nitF = 5L )"},{"path":"https://blue-matter.github.io/MARS/reference/calc_population.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multi-fleet, multi-area, multi-stock population dynamics model — calc_population","text":"ny Integer, number years projection nm Integer, number seasons na Integer, number age classes nf Integer, number fleets nr Integer, number regions ns Integer, number stocks initN_ars Abundance first year, first season. Array [, r, s] mov_ymarrs Movement array [y, m, , r, r, s]. missing, uses diagonal matrix (movement among areas). M_yas Natural mortality (per year). Array [y, , s] SRR_s Character vector s stock recruit relationship. See calc_recruitment() options sralpha_s Numeric vector s stock recruit alpha parameter srbeta_s Numeric vector s stock recruit beta parameter mat_yas Maturity ogive. Array [y, , s] fec_yas Fecundity schedule (spawning output mature individuals). Array [y, , s] Rdev_ys Recruitment deviations. Matrix [y, s] m_spawn Integer, season spawning m_rec Integer, season recruitment delta_s Numeric vector s. Fraction season elapses spawning occurs, e.g., midseason spawning delta_s = 0.5. natal_rs Matrix [r, s]. fraction mature stock s region r spawns time spawning. See example Dstock. recdist_rs Matrix [r, s]. fraction incoming recruitment stock s settles region r. fwt_ymafs Fishery weight age. Array [y, m, , f, s] q_fs Relative catchability stock s fleet f. Defaults 1 missing. Matrix [f, s] sel_ymafs Fishery selectivity. Array [y, m, , f, s] condition Whether fishing mortality conditioned catch specified F argument. F_ymfr Fishing mortality (per season). Array [y, m, f, r]. used condition = \"F\". Cobs_ymfr Fishery catch (weight). Array [y, m, f, r]. used condition = \"catch\" solve F (see calc_F()). Fmax Numeric, maximum Findex value nitF Integer, number iterations Newton-Raphson routine","code":""},{"path":"https://blue-matter.github.io/MARS/reference/calc_population.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multi-fleet, multi-area, multi-stock population dynamics model — calc_population","text":"named list containing: N_ymars Stock abundance F_ymars Fishing mortality (summed across fleets) F_ymfr Fishing mortality (fleet region) Z_ymars Total mortality F_ymafrs Fishing mortality (disaggregated fleet) CN_ymafrs Catch age (abundance) CB_ymfrs Fishery catch (weight) VB_ymfrs Vulnerable biomass available fishing fleets Nsp_yars Spawning abundance (spawning season) Npsp_yars Mature abundance (outside natal regions) S_yrs Spawning output R_ys Recruitment penalty Numeric quadratic penalty apical fishing mortality (fleet) exceeds Fmax. See calc_F().","code":""},{"path":"https://blue-matter.github.io/MARS/reference/calc_population.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multi-fleet, multi-area, multi-stock population dynamics model — calc_population","text":"","code":"unfished_pop <- calc_population()"},{"path":"https://blue-matter.github.io/MARS/reference/calc_recruitment.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate recruitment from stock-recruit function — calc_recruitment","title":"Calculate recruitment from stock-recruit function — calc_recruitment","text":"Calculate recruitment stock-recruit function","code":""},{"path":"https://blue-matter.github.io/MARS/reference/calc_recruitment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate recruitment from stock-recruit function — calc_recruitment","text":"","code":"calc_recruitment(x, SRR = c(\"BH\", \"Ricker\"), eq = FALSE, ...)"},{"path":"https://blue-matter.github.io/MARS/reference/calc_recruitment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate recruitment from stock-recruit function — calc_recruitment","text":"x Numeric, either spawning output equilibrium spawners per recruit, recruitment calculated. See argument eq. SRR Character indicate functional form stock recruit function eq Logical, indicates whether x spawning output (FALSE) equilibrium spawners per recruit (TRUE) ... Parameters SRR function. Provide one two sets variables: h, R0 phi0, b (alpha, beta values)","code":""},{"path":"https://blue-matter.github.io/MARS/reference/calc_recruitment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate recruitment from stock-recruit function — calc_recruitment","text":"","code":"calc_recruitment(10, SRR = \"Ricker\", a = 2, b = 0.5) #> [1] 0.1347589 calc_recruitment(10, SRR = \"Ricker\", h = 0.9, R0 = 1, phi0 = 1) #> [1] 4.480838e-07"},{"path":"https://blue-matter.github.io/MARS/reference/check_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Check dimensions and inputs in MARSdata object — check_data","title":"Check dimensions and inputs in MARSdata object — check_data","text":"Ensures data inputs proper dimension. Whenever possible, default values added missing items.","code":""},{"path":"https://blue-matter.github.io/MARS/reference/check_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check dimensions and inputs in MARSdata object — check_data","text":"","code":"check_data(MARSdata, silent = FALSE)"},{"path":"https://blue-matter.github.io/MARS/reference/check_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check dimensions and inputs in MARSdata object — check_data","text":"MARSdata S4 object containing data inputs. See MARSdata silent Logical, whether report default values console","code":""},{"path":"https://blue-matter.github.io/MARS/reference/check_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check dimensions and inputs in MARSdata object — check_data","text":"updated MARSdata object.","code":""},{"path":[]},{"path":"https://blue-matter.github.io/MARS/reference/conv_Sigma.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate covariance matrix — conv_Sigma","title":"Calculate covariance matrix — conv_Sigma","text":"Uses Cholesky factorization generate covariance matrix (symmetric positive definite matrix).","code":""},{"path":"https://blue-matter.github.io/MARS/reference/conv_Sigma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate covariance matrix — conv_Sigma","text":"","code":"conv_Sigma(sigma, lower_diag)"},{"path":"https://blue-matter.github.io/MARS/reference/conv_Sigma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate covariance matrix — conv_Sigma","text":"sigma Numeric vector marginal standard deviations (greater zeros) lower_diag Numeric vector populate lower triangle correlation matrix. real numbers. Length sum(1:(length(sigma) - 1))","code":""},{"path":"https://blue-matter.github.io/MARS/reference/conv_Sigma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate covariance matrix — conv_Sigma","text":"","code":"set.seed(23) n <- 5 sigma <- runif(n, 0, 2) lower_diag <- runif(sum(1:(n-1)), -10, 10) Sigma <- conv_Sigma(sigma, lower_diag) Sigma/t(Sigma) # Is symmetric matrix? All ones #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    1    1    1    1 #> [2,]    1    1    1    1    1 #> [3,]    1    1    1    1    1 #> [4,]    1    1    1    1    1 #> [5,]    1    1    1    1    1 cov2cor(Sigma) #>            [,1]       [,2]       [,3]       [,4]       [,5] #> [1,]  1.0000000 -0.8363414  0.6805096  0.7786780  0.6086421 #> [2,] -0.8363414  1.0000000 -0.1694648 -0.3245098 -0.3116680 #> [3,]  0.6805096 -0.1694648  1.0000000  0.9513182  0.6523565 #> [4,]  0.7786780 -0.3245098  0.9513182  1.0000000  0.7979121 #> [5,]  0.6086421 -0.3116680  0.6523565  0.7979121  1.0000000"},{"path":"https://blue-matter.github.io/MARS/reference/conv_mov.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate movement matrix for all age classes — conv_mov","title":"Calculate movement matrix for all age classes — conv_mov","text":"Movement matrices calculated age classes base matrix gravity model formulation (Carruthers et al. 2016).","code":""},{"path":"https://blue-matter.github.io/MARS/reference/conv_mov.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate movement matrix for all age classes — conv_mov","text":"","code":"conv_mov(x, g, v, na = dim(x)[1], nr = dim(x)[2], aref = ceiling(0.5 * na))"},{"path":"https://blue-matter.github.io/MARS/reference/conv_mov.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate movement matrix for all age classes — conv_mov","text":"x Base log-movement parameters. See details. Array [, r, r] g Gravity model attractivity term. Tendency move region r. Matrix [, r] v Gravity model viscosity term. Tendency stay region. Vector na Integer, number ages nr Integer, number regions aref Integer, reference age class","code":""},{"path":"https://blue-matter.github.io/MARS/reference/conv_mov.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate movement matrix for all age classes — conv_mov","text":"Movement array [, r, r]","code":""},{"path":"https://blue-matter.github.io/MARS/reference/conv_mov.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate movement matrix for all age classes — conv_mov","text":"Rows index region origin columns denote region destination. log space, movement matrix \\(m_a\\) age class \\(\\) region \\(r\\) \\(r'\\) sum base matrix \\(x\\) gravity matrix \\(G\\): $$m_{,r,r'} = x_{,r,r'} + G_{,r,r'}$$ essentially exclude movement \\(r\\) \\(r'\\), set \\(x_{,r,r'} = -1000\\). Gravity matrix \\(G\\) includes attractivity term \\(g\\) viscosity term \\(v\\): $$G_{,r,r'} = \\begin{cases} g'_{,r'} + v_a \\quad & r = r'\\\\ g'_{,r'} \\quad & \\textrm{otherwise} \\end{cases} $$ Vector \\(g'\\) offset terms relative value reference age class: $$g'_{,r'} = \\begin{cases} g_{,r} \\quad & = a_{ref}\\\\ g_{,r} + g_{=aref,r} \\quad & \\textrm{otherwise} \\end{cases} $$ movement matrix normal space obtained softmax transformation: $$M_{,r,r'} = \\dfrac{\\exp(m_{,r,r'})}{\\sum_{r'}\\exp(m_{,r,r'})}$$ \\(x\\) \\(v\\) zero, movement matrix simply distributes total stock abundance various regions specified \\(g'\\).","code":""},{"path":"https://blue-matter.github.io/MARS/reference/conv_mov.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate movement matrix for all age classes — conv_mov","text":"Carruthers, T.R., et al. 2015. Modelling age-dependent movement: application red gag groupers Gulf Mexico. CJFAS 72: 1159-1176. doi:10.1139/cjfas-2014-0471","code":""},{"path":"https://blue-matter.github.io/MARS/reference/conv_selpar.html","id":null,"dir":"Reference","previous_headings":"","what":"Selectivity at age and length — conv_selpar","title":"Selectivity at age and length — conv_selpar","text":"Calculate selectivity age length matrix parameters. conv_selpar() converts parameters log logit space real units. calc_sel_len() calculates selectivity length. calc_fsel_age() calculates selectivity age fisheries, coordinates dummy fleets. calc_isel_age() calculates selectivity age indices, can map selectivity fisheries population parameters (e.g, mature total biomass).","code":""},{"path":"https://blue-matter.github.io/MARS/reference/conv_selpar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Selectivity at age and length — conv_selpar","text":"","code":"conv_selpar(x, type, maxage, maxL)  calc_sel_len(sel_par, lmid, type)  calc_fsel_age(   sel_len,   LAK,   type,   sel_par,   sel_block = seq(1, length(type)),   mat,   a = seq(1, nrow(LAK)) )  calc_isel_age(   sel_len,   LAK,   type,   sel_par,   fsel_age,   maxage,   mat,   a = seq(1, nrow(LAK)) )"},{"path":"https://blue-matter.github.io/MARS/reference/conv_selpar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Selectivity at age and length — conv_selpar","text":"x Estimated parameters. Matrix [3, f] type Character string indicate functional form selectivity. Options include: \"logistic_length\", \"dome_length\", \"logistic_age\", \"dome_age\", integer (f) map index selectivity corresponding fleet f (coerced integer), \"SB\" fix maturity age schedule, \"B\" fix 1 ages. maxage Maximum value age full selectivity maxL Maximum value length full selectivity sel_par Matrix parameters returned conv_selpar() lmid Midpoints length bins calculating selectivity length sel_len Selectivity length matrix returned calc_sel_len() LAK Length--age probability matrix. Matrix [, length(lmid)] sel_block Integer vector. Length length(type). See details . mat Maturity age vector Integer vector ages corresponding rows LAK (well mat) fsel_age Matrix returned calc_fsel_age()","code":""},{"path":"https://blue-matter.github.io/MARS/reference/conv_selpar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Selectivity at age and length — conv_selpar","text":"conv_selpar() returns matrix dimensions x. calc_sel_len() returns matrix [l, f], .e., [length(lmid), length(type)]. calc_fsel_age() returns matrix [, f], .e., [, length(sel_block)] calc_isel_age() returns matrix [, ], .e., [, length(type)]","code":""},{"path":"https://blue-matter.github.io/MARS/reference/conv_selpar.html","id":"converting-selectivity-parameters-conv-selpar-","dir":"Reference","previous_headings":"","what":"Converting selectivity parameters (conv_selpar)","title":"Selectivity at age and length — conv_selpar","text":"first row x corresponds length age full selectivity: \\(\\mu_f = L_{max}/(1 + \\exp(-x_{1,f}))\\) second row x corresponds width ascending limb selectivity: \\(\\sigma_f^{asc} = \\exp(x_{2,f})\\) third row x corresponds width descending limb selectivity (dome-shaped): \\(\\sigma_f^{des} = \\exp(x_{3,f})\\)","code":""},{"path":"https://blue-matter.github.io/MARS/reference/conv_selpar.html","id":"length-selectivity-calc-sel-len-","dir":"Reference","previous_headings":"","what":"Length selectivity (calc_sel_len)","title":"Selectivity at age and length — conv_selpar","text":"selectivity length $$ s_{\\ell} = \\begin{cases} \\exp(\\alpha) & L_{\\ell} < \\mu_f\\\\ \\exp(\\beta) & L_{\\ell} \\ge \\mu_f\\\\ \\end{cases} $$ \\( \\alpha = -0.5(L_\\ell - \\mu_f)^2/(\\sigma_f^{asc})^2 \\) \\( \\beta = -0.5(L_\\ell - \\mu_f)^2/(\\sigma_f^{des})^2 \\)","code":""},{"path":"https://blue-matter.github.io/MARS/reference/conv_selpar.html","id":"age-selectivity-calc-fsel-age-","dir":"Reference","previous_headings":"","what":"Age selectivity (calc_fsel_age)","title":"Selectivity at age and length — conv_selpar","text":"equivalent selectivity age converted length values (sel_len) $$ s_a = \\sum_\\ell s_\\ell \\times \\textrm{Prob}(L_{\\ell}|) $$ selectivity explicitly age units, values directly calculated parameters sel_par. Vector sel_block assigns output selectivity different column input matrix facilitates time-varying selectivity time blocks. example, sel_block[1] <- 2 means selectivity values first column output based second column input matrices (sel_len[, 2] sel_par[, 2]).","code":""},{"path":"https://blue-matter.github.io/MARS/reference/fit_MARS.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit MARS model — fit_MARS","title":"Fit MARS model — fit_MARS","text":"Wrapper function calls RTMB create model perform numerical optimization","code":""},{"path":"https://blue-matter.github.io/MARS/reference/fit_MARS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit MARS model — fit_MARS","text":"","code":"fit_MARS(   MARSdata,   parameters,   map = list(),   random = NULL,   run_model = TRUE,   do_sd = TRUE,   report = TRUE,   silent = FALSE,   control = list(iter.max = 2e+05, eval.max = 4e+05),   ... )"},{"path":"https://blue-matter.github.io/MARS/reference/fit_MARS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit MARS model — fit_MARS","text":"MARSdata Data object. Class MARSdata, validated check_data() parameters List parameters, e.g., returned make_parameters() validated check_parameters(). map List parameters indicated whether fixed shared, e.g., returned make_parameters(). See TMB::MakeADFun(). random Character vector indicating parameters random effects, e.g., returned make_parameters(). run_model Logical, whether fit model stats::nlminb(). do_sd Logical, whether calculate standard errors TMB::sdreport(). report Logical, whether return report list obj$report(obj$env$last.par.best). silent Logical, whether report progress console. passed TMB::MakeADFun(). control Passed stats::nlminb() ... arguments TMB::MakeADFun().","code":""},{"path":"https://blue-matter.github.io/MARS/reference/fit_MARS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit MARS model — fit_MARS","text":"MARSassess object.","code":""},{"path":[]},{"path":"https://blue-matter.github.io/MARS/reference/get_MARSdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve data object used to fit model — get_MARSdata","title":"Retrieve data object used to fit model — get_MARSdata","text":"convenient function retrieve data object used fit model. object embedded environment within RTMB object.","code":""},{"path":"https://blue-matter.github.io/MARS/reference/get_MARSdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve data object used to fit model — get_MARSdata","text":"","code":"get_MARSdata(MARSassess)"},{"path":"https://blue-matter.github.io/MARS/reference/get_MARSdata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve data object used to fit model — get_MARSdata","text":"MARSassess MARSassess object returned fit_MARS()","code":""},{"path":"https://blue-matter.github.io/MARS/reference/get_MARSdata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve data object used to fit model — get_MARSdata","text":"MARSdata object","code":""},{"path":"https://blue-matter.github.io/MARS/reference/get_sdreport.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate standard errors — get_sdreport","title":"Calculate standard errors — get_sdreport","text":"wrapper function return standard errors. Various numerical techniques employed obtain positive-definite covariance matrix.","code":""},{"path":"https://blue-matter.github.io/MARS/reference/get_sdreport.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate standard errors — get_sdreport","text":"","code":"get_sdreport(obj, getReportCovariance = FALSE, silent = FALSE, ...)"},{"path":"https://blue-matter.github.io/MARS/reference/get_sdreport.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate standard errors — get_sdreport","text":"obj list returned RTMB::MakeADFun() getReportCovariance Logical, passed TMB::sdreport() silent Logical, whether report progress console. See details. ... arguments TMB::sdreport() besides par.fixed, hessian.fixed, getReportCovariance","code":""},{"path":"https://blue-matter.github.io/MARS/reference/get_sdreport.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate standard errors — get_sdreport","text":"Object returned TMB::sdreport(). correlation matrix generated stored : get_sdreport(obj)$env$corr.fixed","code":""},{"path":"https://blue-matter.github.io/MARS/reference/get_sdreport.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate standard errors — get_sdreport","text":"marginal cases determinant Hessian matrix less 0.1, several steps utilized obtain positive-definite covariance matrix, following order: Invert hessian returned h <- obj@(obj$env.last.par.best) (skipped models random effects) Invert hessian returned h <- stats::optimHess(obj$env.last.par.best, obj$fn, obj$gr) Invert hessian returned h <- numDeriv::jacobian(obj$gr, obj$env.last.par.best) Calculate covariance matrix chol2inv(chol(h))","code":""},{"path":"https://blue-matter.github.io/MARS/reference/like_CKMR.html","id":null,"dir":"Reference","previous_headings":"","what":"Likelihood for CKMR — like_CKMR","title":"Likelihood for CKMR — like_CKMR","text":"Returns log-likelihood set pairwise comparisons. parent-offspring pair, comparison defined capture year parent, capture age parent, birth year offspring. half-sibling pair, comparison defined cohort year sibling. Binomial Poisson distributions supported (Conn et al. 2020).","code":""},{"path":"https://blue-matter.github.io/MARS/reference/like_CKMR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Likelihood for CKMR — like_CKMR","text":"","code":"like_CKMR(n, m, p, type = c(\"binomial\", \"poisson\"))"},{"path":"https://blue-matter.github.io/MARS/reference/like_CKMR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Likelihood for CKMR — like_CKMR","text":"n number pairwise comparisons m number kinship matches p probability kinship match type statistical distribution likelihood calculation","code":""},{"path":"https://blue-matter.github.io/MARS/reference/like_CKMR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Likelihood for CKMR — like_CKMR","text":"Numeric representing log-likelihood.","code":""},{"path":"https://blue-matter.github.io/MARS/reference/like_CKMR.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Likelihood for CKMR — like_CKMR","text":"Conn, P.B. et al. 2020. Robustness close-kin mark-recapture estimators dispersal limitation spatially varying sampling probabilities. Ecol. Evol. 10: 5558-5569. doi:10.1002/ece3.6296","code":""},{"path":[]},{"path":"https://blue-matter.github.io/MARS/reference/like_comp.html","id":null,"dir":"Reference","previous_headings":"","what":"Likelihood for composition vectors — like_comp","title":"Likelihood for composition vectors — like_comp","text":"Returns log-likelihood composition data, e.g., length, age, stock composition, various statistical distributions supported.","code":""},{"path":"https://blue-matter.github.io/MARS/reference/like_comp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Likelihood for composition vectors — like_comp","text":"","code":"like_comp(   obs,   pred,   type = c(\"multinomial\", \"dirmult1\", \"dirmult2\", \"lognormal\"),   N = sum(obs),   theta,   stdev )"},{"path":"https://blue-matter.github.io/MARS/reference/like_comp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Likelihood for composition vectors — like_comp","text":"obs vector observed values. Internally converted proportions. pred vector predicted values. length obs. Internally converted proportions. type Character desired distribution N Numeric, sample size corresponding obs multinomial Dirichlet multinomial distributions. theta Numeric, linear (type = \"dirmult1\") saturating (type = \"dirmult2\") Dirichlet-multinomial parameter, respectively. See Thorson et al. (2017) stdev Numeric vectorized obs, likelihood standard deviation lognormal distribution.","code":""},{"path":"https://blue-matter.github.io/MARS/reference/like_comp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Likelihood for composition vectors — like_comp","text":"Numeric representing log-likelihood.","code":""},{"path":"https://blue-matter.github.io/MARS/reference/like_comp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Likelihood for composition vectors — like_comp","text":"Observed predicted vectors internally converted proportions. type = \"lognormal\", zero observations removed likelihood calculation.","code":""},{"path":"https://blue-matter.github.io/MARS/reference/like_comp.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Likelihood for composition vectors — like_comp","text":"Thorson et al. 2017. Model-based estimates effective sample size stock assessment models using Dirichlet-multinomial distribution. Fish. Res. 192:84-93. doi:10.1016/j.fishres.2016.06.005","code":""},{"path":"https://blue-matter.github.io/MARS/reference/like_comp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Likelihood for composition vectors — like_comp","text":"","code":"M <- 0.1 age <- seq(1:10) pred <- exp(-M * age) obs <- pred * rlnorm(10, sd = 0.05) like_comp(obs, pred, N = 10, type = \"multinomial\") #> [1] -8.330521 like_comp(obs, pred, N = 100, type = \"multinomial\") #> [1] -17.57996 like_comp(obs, pred, N = 10, type = \"dirmult1\", theta = 1) #> [1] -11.33651 like_comp(obs, pred, N = 10, type = \"dirmult1\", theta = 20) #> [1] -8.015671"},{"path":"https://blue-matter.github.io/MARS/reference/make_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Make list of parameters for RTMB — make_parameters","title":"Make list of parameters for RTMB — make_parameters","text":"Sets list parameters, map parameters (see map argument TMB::MakeADFun()), identifies random effects parameters based input data user choices model configuration. functions provide template parameter map setup can adjusted alternative configurations. check_parameters() checks whether custom made parameter lists correct dimension.","code":""},{"path":"https://blue-matter.github.io/MARS/reference/make_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make list of parameters for RTMB — make_parameters","text":"","code":"make_parameters(   MARSdata,   start = list(),   map = list(),   est_mov = c(\"none\", \"dist_random\", \"gravity_fixed\"),   silent = FALSE,   ... )  make_map(   p,   MARSdata,   map = list(),   est_M = FALSE,   est_h = FALSE,   est_mat = FALSE,   est_sdr = FALSE,   est_mov = c(\"none\", \"dist_random\", \"gravity_fixed\"),   est_qfs = FALSE,   silent = FALSE )  check_parameters(p = list(), map, MARSdata, silent = FALSE)"},{"path":"https://blue-matter.github.io/MARS/reference/make_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make list of parameters for RTMB — make_parameters","text":"MARSdata S4 data object start optional list parameters. Named list parameters associated dimensions transformations . Overrides default values created make_parameters(). map List mapped parameters. Used check_parameters() count parameters. est_mov Character describing structure stock movement parameters. See details . silent Logical, whether make_map() reports messages console ... Various arguments make_map() (important!) p List parameters, e.g., returned make_parameters() est_M Logical, estimate natural mortality? est_h Logical, estimate steepness? est_mat Logical, estimate maturity? est_sdr Logical, estimate standard deviation recruitment deviates? est_qfs Logical, estimate relative catchability stocks fleet? Fix log_q_fs first stock TRUE","code":""},{"path":"https://blue-matter.github.io/MARS/reference/make_parameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make list of parameters for RTMB — make_parameters","text":"make_parameters() returns list parameters (\"p\") concatenated output make_map(). make_map() returns named list containing parameter mappings (\"map\") character vector random effects (\"random\"). check_parameters() invisibly returns parameter list problems encountered.","code":""},{"path":"https://blue-matter.github.io/MARS/reference/make_parameters.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Make list of parameters for RTMB — make_parameters","text":"Generally parameter names three components, separated underscores. example, log_M_s represents natural logarithm natural mortality, vector stock s. first component describes transformation estimated parameter space normal parameter space, frequently, log logit. Prefix t indicates custom transformation described . Second parameter name, e.g., M natural mortality, rdev recruitment deviates, etc. Third dimension parameter variable indexing vectors, matrices, arrays, e.g., y year, s stock. See MARSdata. , additional index p represents number parameters described . t_R0_s Vector s. Unfished recruitment, .e., intersection unfished replacement line average stock recruit function, represented : R0_s <- exp(t_R0_s) * MARSdata@Dmodel@scale_s. default, t_R0_s = 3 t_h_s Vector s. Steepness stock-recruit function. Logit space Beverton-Holt log space Ricker functions. Default steepness value 0.8 mat_ps Matrix [2, s]. Maturity parameters (can estimated specified data object). Logistic functional form. parameter first row age 50 percent maturity logit space: a50_s <- plogis(mat_ps[1, ] * na). second row age 95 percent maturity logarithmic offset: a95_s <- a50_s + exp(mat_ps[2, ]). Default a50_s <- 0.5 * na a95_s <- a50_s + 1 log_M_s Vector s. Natural logarithm natural mortality (can estimated specified data object). Default parameter value stocks: M <- -log(0.05)/MARSdata@Dmodel@na log_rdev_ys Matrix [y, s]. Log recruitment deviations. default, start values zero. log_sdr_s Vector s. log-Standard deviation log recruitment deviations. Default SD = 0.4 log_q_fs Matrix [f, s]. natural logarithm q_fs, relative fishing efficiency f stock s. Equal values imply equal catchability stocks. See equations calc_F(). Default sets values zero. log_Fdev_ymfr Array [y, m, f, r]. Fishing mortality parameters. fleet, log F estimated directly reference year, season, region. strata, F offset value: $$ F_{y,m,f,r} = \\begin{cases} \\exp(x^{\\textrm{Fmult}}_f) \\quad & y = y_{\\textrm{ref}}, m = m_{\\textrm{ref}}, r = r_{\\textrm{ref}}\\\\ \\exp(x^{\\textrm{Fmult}}_f + x^{\\textrm{Fdev}}_{y,m,r}) \\quad & \\textrm{otherwise} \\end{cases} $$ sel_pf Matrix [3, f]. Fishery selectivity parameters logit log space. See equations conv_selpar(), sel_pf x matrix. sel_pi Matrix [3, ]. Index selectivity parameters logit log space. See equations conv_selpar(), sel_pi x matrix. mov_x_marrs Array [m, , r, r, s]. Base movement matrix. Set -1000 effectively exclude movements region pairs. See equations conv_mov() mov_g_ymars Array [y, m, , r, s]. Attractivity term gravity model movement. x v zero, matrix specifies distribution total stock abundance various regions. See equations conv_mov() mov_v_ymas Array [y, m, , s]. Viscosity term gravity model movement. See equations conv_mov() log_sdg_rs Array [r, s]. Marginal log standard deviation stock distribution (mov_g_ymars) among regions stock s. used est_mov = \"dist_random\". Default SD 0.1. t_corg_ps Array [sum(1:(nr - 1)), s]. Lower triangle correlation matrix mov_g_ymars, obtained Cholesky factorization. used est_mov = dist_random. Default values zero. log_initF_mfr Array [m, f, r]. Initial F corresponding equilibrium catch. log_initrdev_as Array [, s]. Recruitment deviations initial abundance--age vector.","code":""},{"path":"https://blue-matter.github.io/MARS/reference/make_parameters.html","id":"start-list","dir":"Reference","previous_headings":"","what":"Start list","title":"Make list of parameters for RTMB — make_parameters","text":"Users can provide R0_s h_s start list. make_parameters() make appropriate transformation starting values t_R0_s t_h_s, respectively.","code":""},{"path":"https://blue-matter.github.io/MARS/reference/make_parameters.html","id":"movement-setup-for-make-map-","dir":"Reference","previous_headings":"","what":"Movement setup for make_map()","title":"Make list of parameters for RTMB — make_parameters","text":"single region model est_mov = \"none\": movement parameters estimated. est_mov = \"dist_random\": fix values mov_x_marrs mov_v_ymas. Fix mov_g_ymars first region year, season, age, stock. mov_g_ymars random effects. est_mov = \"gravity_fixed\": fix values mov_x_marrs. Fix mov_g_ymars first region year, season, age, stock. Estimate mov_v_ymas. mov_g_ymars mov_v_ymas fixed effects. default p$mov_x_marrs zero. Set -1000 areas abundance particular stock.","code":""},{"path":[]},{"path":"https://blue-matter.github.io/MARS/reference/optimize_RTMB.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimize RTMB model — optimize_RTMB","title":"Optimize RTMB model — optimize_RTMB","text":"convenient function fits RTMB model calculates standard errors.","code":""},{"path":"https://blue-matter.github.io/MARS/reference/optimize_RTMB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimize RTMB model — optimize_RTMB","text":"","code":"optimize_RTMB(   obj,   hessian = FALSE,   restart = 0,   do_sd = TRUE,   control = list(iter.max = 2e+05, eval.max = 4e+05),   lower = -Inf,   upper = Inf,   silent = FALSE )"},{"path":"https://blue-matter.github.io/MARS/reference/optimize_RTMB.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimize RTMB model — optimize_RTMB","text":"obj list returned RTMB::MakeADFun() hessian Logical, whether pass Hessian function obj$stats::nlminb(). used random effects model. restart Integer, maximum number additional attempts fit model. See details. do_sd Logical, whether calculate standard errors get_sdreport() control List options passed stats::nlminb() lower Lower bounds parameters passed stats::nlminb() upper Upper bounds parameters passed stats::nlminb() silent Logical, whether report progress console","code":""},{"path":"https://blue-matter.github.io/MARS/reference/optimize_RTMB.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimize RTMB model — optimize_RTMB","text":"named list: \"opt\" output stats::nlminb() \"SD\" output get_sdreport()","code":""},{"path":"https://blue-matter.github.io/MARS/reference/optimize_RTMB.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Optimize RTMB model — optimize_RTMB","text":"Argument restart allows recursive model fitting obtain convergence, following procedure: Optimize model stats::nlminb(). Determine convergence, defined TMB::sdreport() whether Cholesky decomposition covariance matrix possible. convergence achieved, jitter parameter estimates multiplicative factor rlnorm(mean = 0, sd = 1e-3) return step 1.","code":""},{"path":[]},{"path":"https://blue-matter.github.io/MARS/reference/plot-MARS-data.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting functions for data in MARS model — plot-MARS-data","title":"Plotting functions for data in MARS model — plot-MARS-data","text":"set functions plot data variables predicted values (catch, age composition, etc.)","code":""},{"path":"https://blue-matter.github.io/MARS/reference/plot-MARS-data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting functions for data in MARS model — plot-MARS-data","text":"","code":"plot_catch(fit, f = 1, by = c(\"region\", \"stock\"), prop = FALSE, annual = FALSE)  plot_index(fit, i = 1, zoom = FALSE)  plot_CAA(fit, f = 1, r = 1)  plot_CAL(fit, f = 1, r = 1)  plot_IAA(fit, i = 1)  plot_IAL(fit, i = 1)  plot_SC(fit, ff = 1, aa = 1, r = 1, prop = FALSE)  plot_tagmov(fit, s = 1, yy = 1, aa = 1)"},{"path":"https://blue-matter.github.io/MARS/reference/plot-MARS-data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting functions for data in MARS model — plot-MARS-data","text":"fit MARSassess object returned fit_MARS() f Integer, indexes fleet Character indicate dimension multivariate plots prop Logical, whether plot proportions (TRUE) absolute numbers annual Logical, whether plot annual values (summed seasons) Integer, indexes survey zoom Logical, plot_index(). TRUE, plots subset years observed data points. Otherwise, plots predicted values model years. r Integer, indexes region ff Integer, indexes aggregate fleet (stock composition data) aa Integer, indexes aggregate age class (stock composition tag data) s Integer, indexes stock yy Integer, indexes aggregate years (tag data)","code":""},{"path":"https://blue-matter.github.io/MARS/reference/plot-MARS-data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plotting functions for data in MARS model — plot-MARS-data","text":"Various base graphics plots","code":""},{"path":"https://blue-matter.github.io/MARS/reference/plot-MARS-data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plotting functions for data in MARS model — plot-MARS-data","text":"plot_catch plots fishery catch stock region (either whole numbers proportions) plot_index plots indices abundance plot_CAA plots fishery catch age plot_CAL plots catch length plot_IAA plots index age composition plot_IAL plots index length composition plot_SC plots stock composition plot_tagmov plots tag movements","code":""},{"path":"https://blue-matter.github.io/MARS/reference/plot-MARS-state.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting functions for fitted MARS model — plot-MARS-state","title":"Plotting functions for fitted MARS model — plot-MARS-state","text":"set functions plot state variables (biomass, recruitment time series, etc.)","code":""},{"path":"https://blue-matter.github.io/MARS/reference/plot-MARS-state.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting functions for fitted MARS model — plot-MARS-state","text":"","code":"plot_S(fit, by = c(\"total\", \"stock\", \"region\"), r, s, prop = FALSE)  plot_B(fit, by = c(\"total\", \"stock\", \"region\"), r, s, prop = FALSE)  plot_R(fit, s)  plot_SRR(fit, s = 1, phi = TRUE)  plot_Rdev(fit, s = 1, log = TRUE)  plot_Fstock(fit, s, by = c(\"annual\", \"season\"))  plot_self(fit, f = 1, type = c(\"length\", \"age\"))  plot_seli(fit, i = 1)  plot_selstock(   fit,   s = 1,   by = c(\"annual\", \"season\"),   plot2d = c(\"contour\", \"filled.contour\"),   ... )  plot_N(fit, m = 1, r, s = 1, plot2d = c(\"contour\", \"filled.contour\"), ...)  plot_V(fit, f = 1, by = c(\"stock\", \"region\"), prop = FALSE)  plot_Ffleet(fit, f = 1)  plot_mov(fit, s = 1, y, a)  plot_recdist(fit)"},{"path":"https://blue-matter.github.io/MARS/reference/plot-MARS-state.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting functions for fitted MARS model — plot-MARS-state","text":"fit MARSassess object returned fit_MARS() Character indicate whether calculate selectivity F per year per season r Integer corresponding region s Integer corresponding stock prop Logical, whether plot proportions (TRUE) absolute numbers phi Logical, whether plot unfished replacement line log Logical, whether plot natural logarithm response variable f Integer corresponding fleet type plot_self, indicates whether plot selectivity age length. Integer corresponding survey plot2d Character, plotting function either contour() filled.contour() plot ... argument base graphics function m Integer corresponding season y Integer, year plotting movement matrix Integer, corresponding age plotting movement matrix","code":""},{"path":"https://blue-matter.github.io/MARS/reference/plot-MARS-state.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plotting functions for fitted MARS model — plot-MARS-state","text":"Various base graphics plots","code":""},{"path":"https://blue-matter.github.io/MARS/reference/plot-MARS-state.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plotting functions for fitted MARS model — plot-MARS-state","text":"plot_S plots spawning output stock region (either whole numbers proportions latter) plot_B plots total biomass stock region (either whole numbers proportions latter) plot_R plots recruitment stock plot_SRR plots stock-recruitment relationship history (realized recruitment) stock plot_Rdev plots recruitment deviations stock plot_Fstock plots apical instantaneous fishing mortality (per year per season) stock plot_self plots fishery selectivity plot_seli plots index selectivity plot_selstock plots realized selectivity total catch total abundance age plot_N reports total abundance age plot_V plots vulnerable biomass, availability fishery plot_Ffleet plots apical instantaneous fishing mortality (per season) fleet plot_mov plots movement matrices corresponding equilibrium distribution multi-area models plot_recdist plots distribution recruitment stock","code":""},{"path":"https://blue-matter.github.io/MARS/reference/posfun.html","id":null,"dir":"Reference","previous_headings":"","what":"Quadratic penalty function — posfun","title":"Quadratic penalty function — posfun","text":"Taped penalty function x < eps","code":""},{"path":"https://blue-matter.github.io/MARS/reference/posfun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quadratic penalty function — posfun","text":"","code":"posfun(x, eps)"},{"path":"https://blue-matter.github.io/MARS/reference/posfun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quadratic penalty function — posfun","text":"x Numeric, parameter eps Numeric, threshold penalty applied","code":""},{"path":"https://blue-matter.github.io/MARS/reference/posfun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quadratic penalty function — posfun","text":"penalty value $$ \\textrm{penalty} = \\begin{cases} 0.1 (x - \\varepsilon)^2 & x \\le \\varepsilon\\\\ 0 & x > \\varepsilon \\end{cases} $$","code":""},{"path":"https://blue-matter.github.io/MARS/reference/prior.html","id":null,"dir":"Reference","previous_headings":"","what":"Priors for MARS model — prior","title":"Priors for MARS model — prior","text":"Priors MARS set providing character strings parsed expression evaluated model environment (see example). provides flexibility set prior desired model parameter variable. See list parameters documentation [check_parameters()] options (note priors log_rdev_ys log_initrdev_as needed hard-coded model). Several functions generate character string prior important dynamics parameters, natural mortality steepness.","code":""},{"path":"https://blue-matter.github.io/MARS/reference/prior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Priors for MARS model — prior","text":"","code":"prior_h(MARSdata, s = 1, m, stdev)  prior_M(MARSdata, s = 1, meanlog, sdlog)  prior_q(MARSdata, i = 1, meanlog, sdlog)"},{"path":"https://blue-matter.github.io/MARS/reference/prior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Priors for MARS model — prior","text":"MARSdata Data object. Class MARSdata s Integer stock m Mean un-transformed space stdev Standard deviation un-transformed space meanlog Mean lognormal distribution log scale sdlog Standard lognormal distribution log scale Integer corresponding index","code":""},{"path":"https://blue-matter.github.io/MARS/reference/prior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Priors for MARS model — prior","text":"Character.","code":""},{"path":"https://blue-matter.github.io/MARS/reference/prior.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Priors for MARS model — prior","text":"prior_h returns log prior stock-recruit steepness. Beta distribution Beverton-Holt function normal distribution Ricker function. prior_M returns log prior natural mortality. Lognormal distribution. prior_q returns log prior index catchability. Lognormal distribution.","code":""},{"path":"https://blue-matter.github.io/MARS/reference/prior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Priors for MARS model — prior","text":"","code":"# Add M and steepness prior to model  dat <- new(\"MARSdata\") dat@Dmodel@ns <- 1 dat@Dstock@SRR_s <- \"BH\"  pr_M <- prior_M(dat, s = 1, log(0.25), 0.3) pr_h <- prior_h(dat, s = 1, 0.8, 0.15) dat@Dmodel@prior <- c(pr_M, pr_h)"},{"path":"https://blue-matter.github.io/MARS/reference/profile.html","id":null,"dir":"Reference","previous_headings":"","what":"Profile parameters of MARS model — profile","title":"Profile parameters of MARS model — profile","text":"Evaluate change objective function likelihood components 2 parameters.","code":""},{"path":"https://blue-matter.github.io/MARS/reference/profile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Profile parameters of MARS model — profile","text":"","code":"# S3 method for class 'MARSassess' profile(fitted, p1, v1, p2, v2, cores = 1, ...)  # S3 method for class 'MARSprof' plot(   x,   component = \"objective\",   rel = TRUE,   xlab,   ylab,   main,   plot2d = c(\"contour\", \"filled.contour\"),   ... )"},{"path":"https://blue-matter.github.io/MARS/reference/profile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Profile parameters of MARS model — profile","text":"fitted MARSassess object returned fit_MARS() p1 Character string represents first parameter profiled, including parameter name index vector/array. See \"Parameters\" section make_parameters(). Additionally, function allows users specify R0_s h_s (normal units). v1 Vector values corresponding p1 p2 Character string represents optional second parameter profiled v2 Vector values corresponding p2 cores Integer number cores use parallel processing (snowfall package) ... argument base graphics function, .e., either plot() contour() x Output profile.MARSassess() component Character column x plotted rel Logical, whether relative change component plotted (TRUE) raw values (FALSE) xlab Optional character x-axis label ylab Optional character y-axis label main Optional character plot title plot2d Character, plotting function two-dimensional profiling (either contour() filled.contour() plot)","code":""},{"path":"https://blue-matter.github.io/MARS/reference/profile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Profile parameters of MARS model — profile","text":"profile generic returns data frame likelihood values correspond fixed values p1 p2. Likelihood loglike refers maximizing probability observed data (higher values better fit) Prior logprior refers maximizing probability parameter prior distribution (higher values closer prior mode) Penalty penalty values added objective function parameters exceed model bounds (lower values better) fn objective function returned RTMB (lower values better) objective objective function returned optimizer (lower values better) accompanying plot function returns line plot 1-dimensional profile contour plot two dimensional profile. plot negative log likelihood negative log prior (better fit lower values). Relative values obtained subtracting fitted value. See attr(x, \"fitted\")","code":""},{"path":"https://blue-matter.github.io/MARS/reference/report.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate markdown reports — report","title":"Generate markdown reports — report","text":"Generate markdown report model fits estimates.","code":""},{"path":"https://blue-matter.github.io/MARS/reference/report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate markdown reports — report","text":"","code":"report(object, ...)  # S3 method for class 'MARSassess' report(   object,   name,   filename = \"MARS\",   dir = tempdir(),   open_file = TRUE,   render_args = list(),   ... )"},{"path":"https://blue-matter.github.io/MARS/reference/report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate markdown reports — report","text":"object object MARS. ... Additional arguments render reports. name Optional character string model name include report, e.g., model run number. Default uses substitute(object) filename Character string name markdown HTML files. dir directory markdown HTML files saved. open_file Logical, whether HTML document opened rendered. render_args List arguments pass rmarkdown::render().","code":""},{"path":"https://blue-matter.github.io/MARS/reference/report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate markdown reports — report","text":"report.MARSassess returns HTML markdown report.","code":""},{"path":"https://blue-matter.github.io/MARS/reference/residuals.MARSassess.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate model residuals — residuals.MARSassess","title":"Calculate model residuals — residuals.MARSassess","text":"Extract residuals fitted model","code":""},{"path":"https://blue-matter.github.io/MARS/reference/residuals.MARSassess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate model residuals — residuals.MARSassess","text":"","code":"# S3 method for class 'MARSassess' residuals(object, vars, type = c(\"response\", \"pearson\"), ...)"},{"path":"https://blue-matter.github.io/MARS/reference/residuals.MARSassess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate model residuals — residuals.MARSassess","text":"object MARSassess object returned fit_MARS() vars Character vector indicate residuals calculated. Available choices MARSdata object : \"Cinit_mfr\", \"Cobs_ymfr\", \"CAAobs_ymafr\", \"CALobs_ymlfr\", \"Iobs_ymi\", \"IAAobs_ymai\", \"IALobs_ymli\", \"SC_ymafrs\" type Character, 'response' log(observed/predicted) values 'pearson' calculating Z-scores. Composition data always use 'pearson'. ... used","code":""},{"path":"https://blue-matter.github.io/MARS/reference/residuals.MARSassess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate model residuals — residuals.MARSassess","text":"named list based vars argument.","code":""},{"path":"https://blue-matter.github.io/MARS/reference/retrospective.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrospective analysis — retrospective","title":"Retrospective analysis — retrospective","text":"Perform retrospective analysis, successive removals recent years data evaluate consistency model estimates biomass, recruitment, etc. summary method returns Mohn's rho plot method generates markdown report.","code":""},{"path":"https://blue-matter.github.io/MARS/reference/retrospective.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrospective analysis — retrospective","text":"","code":"retrospective(MARSassess, yret = 1:5, cores = 1)  # S3 method for class 'MARSretro' plot(x, var = c(\"S_yst\", \"R_yst\", \"F_yst\", \"VB_ymft\"), s = 1, f = 1, ...)  # S3 method for class 'MARSretro' summary(object, by = c(\"stock\", \"fleet\"), ...)  # S3 method for class 'MARSretro' report(   object,   filename = \"retro\",   dir = tempdir(),   open_file = TRUE,   render_args = list(),   ... )"},{"path":"https://blue-matter.github.io/MARS/reference/retrospective.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrospective analysis — retrospective","text":"MARSassess MARSassess object yret Vector integers (greater zero) specifying years remove retrospective analysis cores Integer number cores use parallel processing (snowfall package) x, object Output retrospective function var Character indicate metric, item MARSretro list plotted. See details . s Integer stock index plot f Integer fleet index plot ... used Character indicating whether calculate Mohn's rho stock fleet-based time series filename Character string name markdown HTML files. dir directory markdown HTML files saved. open_file Logical, whether HTML document opened rendered. render_args List arguments pass rmarkdown::render().","code":""},{"path":"https://blue-matter.github.io/MARS/reference/retrospective.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrospective analysis — retrospective","text":"MARSretro object containing named lists arrays generated retrospective analysis: S_yst Spawning output array [y, s, t] t indexes retrospective peel R_yst Recruitment array [y, s, t] F_yst Apical fishing mortality [y, s, t] VB_ymft Vulnerable biomass available fishery [y, m, f, t] plot.MARSretro returns individual figures using base graphics. summary.MARSretro returns matrix Mohn's rho. report.MARSretro returns HTML markdown report.","code":""},{"path":"https://blue-matter.github.io/MARS/reference/sapply2.html","id":null,"dir":"Reference","previous_headings":"","what":"sapply2 function — sapply2","title":"sapply2 function — sapply2","text":"alternate sapply function argument simplify = \"array\" convenience.","code":""},{"path":"https://blue-matter.github.io/MARS/reference/sapply2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sapply2 function — sapply2","text":"","code":"sapply2(X, FUN, ..., USE.NAMES = TRUE)"},{"path":"https://blue-matter.github.io/MARS/reference/sapply2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sapply2 function — sapply2","text":"X, FUN, ..., USE.NAMES arguments sapply()","code":""},{"path":"https://blue-matter.github.io/MARS/reference/simulate.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate data — simulate","title":"Simulate data — simulate","text":"Simulate data observations fitted MARS model.","code":""},{"path":"https://blue-matter.github.io/MARS/reference/simulate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate data — simulate","text":"","code":"# S3 method for class 'MARSassess' simulate(object, nsim = 1, seed = NULL, ...)"},{"path":"https://blue-matter.github.io/MARS/reference/simulate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate data — simulate","text":"object MARSassess object returned fit_MARS() nsim Integer, number simulations seed Random number generator seed ... used","code":""},{"path":"https://blue-matter.github.io/MARS/reference/simulate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate data — simulate","text":"list nsim length data observations","code":""},{"path":"https://blue-matter.github.io/MARS/reference/softmax.html","id":null,"dir":"Reference","previous_headings":"","what":"Softmax function — softmax","title":"Softmax function — softmax","text":"Takes vector real numbers returns corresponding vector probabilities","code":""},{"path":"https://blue-matter.github.io/MARS/reference/softmax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Softmax function — softmax","text":"","code":"softmax(eta, log = FALSE)"},{"path":"https://blue-matter.github.io/MARS/reference/softmax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Softmax function — softmax","text":"eta Vector log Logical, whether return value logarithm","code":""},{"path":"https://blue-matter.github.io/MARS/reference/softmax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Softmax function — softmax","text":"vector equal length eta: \\(\\exp(\\eta)/\\sum\\exp(\\eta)\\)","code":""},{"path":"https://blue-matter.github.io/MARS/reference/softmax.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Softmax function — softmax","text":"Uses MARS:::logspace.add numerical stability","code":""},{"path":"https://blue-matter.github.io/MARS/news/index.html","id":"mars-0009000-alpha-version","dir":"Changelog","previous_headings":"","what":"MARS 0.0.0.9000 (alpha version)","title":"MARS 0.0.0.9000 (alpha version)","text":"Work progress","code":""}]
